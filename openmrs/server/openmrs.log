INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:12,887| In method UserService.savePrivilege. Arguments: Privilege=Task: Modify Allergies, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,004| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,019| In method UserService.savePrivilege. Arguments: Privilege=Get Notes, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,042| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,053| In method UserService.savePrivilege. Arguments: Privilege=Get Order Frequencies, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,093| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,095| In method UserService.savePrivilege. Arguments: Privilege=Delete Notes, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,114| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,116| In method UserService.savePrivilege. Arguments: Privilege=Edit Notes, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,129| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,131| In method UserService.savePrivilege. Arguments: Privilege=Manage Concept Attribute Types, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,142| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,143| In method UserService.savePrivilege. Arguments: Privilege=Manage Search Index, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,159| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,164| In method UserService.savePrivilege. Arguments: Privilege=Get Care Settings, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,185| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,187| In method UserService.savePrivilege. Arguments: Privilege=Manage Order Frequencies, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,199| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,201| In method UserService.savePrivilege. Arguments: Privilege=Get Order Sets, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,214| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,216| In method UserService.savePrivilege. Arguments: Privilege=Manage Order Sets, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,226| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,235| In method UserService.savePrivilege. Arguments: Privilege=Get Concept Attribute Types, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,241| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,338| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: mail.smtp.starttls.enable value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,400| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,401| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: datePicker.weekStart value: 0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,435| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,437| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: searchWidget.dateDisplayFormat value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,449| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,450| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: patientIdentifierSearch.matchMode value: EXACT, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,480| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,482| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: security.allowedFailedLoginsBeforeLockout value: 7, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,497| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,499| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: dashboard.metadata.caseConversion value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,517| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,518| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergy.allergen.ConceptClasses value: Drug,MedSet, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,536| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,538| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergy.reaction.ConceptClasses value: Symptom, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,548| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,555| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: search.indexVersion value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,577| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,579| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: forms.locked value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,589| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,591| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: drugOrder.requireDrug value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,603| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,605| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: personAttributeTypes.locked value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,618| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,619| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: patientIdentifierTypes.locked value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,632| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,634| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: order.nextOrderNumberSeed value: 1, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,648| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,655| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: order.orderNumberGeneratorBeanId value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,675| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,678| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: order.drugRoutesConceptUuid value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,693| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,695| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: order.drugDosingUnitsConceptUuid value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,708| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,711| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: order.drugDispensingUnitsConceptUuid value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,725| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,726| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: order.durationUnitsConceptUuid value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,735| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,737| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: order.testSpecimenSourcesConceptUuid value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,754| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,759| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: provider.unknownProviderUuid value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,782| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,783| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providerSearch.matchMode value: EXACT, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,803| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,805| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: person.attributeSearchMatchMode value: EXACT, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,818| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,819| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: validation.disable value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,829| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,830| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergy.concept.severity.mild value: 1498AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,844| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,847| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergy.concept.severity.moderate value: 1499AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,878| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,880| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergy.concept.severity.severe value: 1500AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,900| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,902| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergy.concept.allergen.food value: 162553AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,916| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,917| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergy.concept.allergen.drug value: 162552AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,942| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,944| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergy.concept.allergen.environment value: 162554AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,963| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,964| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergy.concept.reactions value: 162555AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,985| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,987| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergy.concept.otherNonCoded value: 5622AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:13,998| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:13,999| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergy.concept.unknown value: 1067AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:14,016| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:14,019| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: drugOrder.drugOther value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:14,029| Exiting method saveGlobalProperty
INFO - HibernateContextDAO.updateSearchIndex(491) |2019-02-17 22:18:14,042| Updating the search index... It may take a few minutes.
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:14,909| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: search.indexVersion value: 7, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:14,938| Exiting method saveGlobalProperty
INFO - HibernateContextDAO.updateSearchIndex(500) |2019-02-17 22:18:14,940| Finished updating the search index
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:15,880| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: event.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:15,898| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:15,901| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: event.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:15,924| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:16,014| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: legacyui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:16,029| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:16,040| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: legacyui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:16,045| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:16,169| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: basicexample.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:16,182| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:16,195| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: basicexample.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:16,200| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:16,891| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:16,906| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:16,909| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:16,920| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:16,954| In method UserService.savePrivilege. Arguments: Privilege=View FHIR Client, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:16,966| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:16,994| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.baseUrl value: http://localhost:8080/openmrs/ws/fhir, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,005| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,015| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.isCustomerNarrativesEnabled value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,020| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,021| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.customNarrativePropertiesPath value: classpath:/com/foo/customnarrative.properties, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,040| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,044| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.allergy.strategy value: DefaultAllergyStrategy, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,068| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,073| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.person.strategy value: DefaultPersonStrategy, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,129| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,131| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.relatedPerson.strategy value: DefaultRelatedPersonStrategy, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,145| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,148| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.location.strategy value: DefaultLocationStrategy, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,179| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,180| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.patient.strategy value: DefaultPatientStrategy, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,196| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,197| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.group.strategy value: DefaultGroupStrategy, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,212| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,213| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.encounter.strategy value: DefaultEncounterStrategy, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,221| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,223| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.appointment.strategy value: DefaultAppointmentStrategy, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,235| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,239| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.practitioner.strategy value: DefaultPractitionerStrategy, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,253| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,258| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.allergy.strategy.concept.uuid value: 1234, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,278| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,279| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.observation.strategy value: DefaultObservationStrategy, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,297| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,298| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.medication.strategy value: DefaultMedicationStrategy, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,311| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,313| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.medicationRequest.strategy value: DefaultMedicationRequestStrategy, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,328| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,330| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.procedureRequest.strategy value: DefaultProcedureRequestStrategy, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,366| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,368| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.concept.codingSystem value: OPENMRS, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,387| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,398| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.encounter.encounterRoleUuid value: 73bbb069-9781-4afc-a9d1-54b6b2270e03, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,425| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,426| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.encounter.encounterType.DEFAULT value: 01234-abcde-56789, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,436| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,437| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.encounter.encounterType.LAB value: 01234-abcde-56789, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,459| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,467| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.encounter.encounterType.RAD value: 01234-abcde-56789, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,482| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,483| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.diagnosticreport.name value: 0123456789, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,496| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,497| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.diagnosticreport.status value: 0123456789, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,513| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,514| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.diagnosticreport.result value: 0123456789, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,527| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,530| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.diagnosticreport.imagingstudy value: 0123456789, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,543| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,546| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.imagingstudy.series value: 0123456789, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,562| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,563| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.imagingstudy.series.instance value: 0123456789, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,580| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,581| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.diagnosticreport.presentedform value: 0123456789, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,595| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,597| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.imagingstudy.series.instance.content value: 0123456789, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,603| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,604| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.diagnosticreport.radiology.server value: http://fhir-dev.healthintersections.com.au/open, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,617| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,618| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.concepts.conditions value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,633| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,634| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.uriPrefix value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,643| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,702| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: dataexchange.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,711| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,714| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: dataexchange.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,727| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,786| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingcompatibility.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,792| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,796| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingcompatibility.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,804| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,892| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingcompatibility.patientLinkUrl value: patientDashboard.form, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,910| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:17,916| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingcompatibility.data_export_batch_size value: 7500, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:17,924| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,173| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: webservices.rest.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,185| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,187| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: webservices.rest.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,195| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,218| In method UserService.savePrivilege. Arguments: Privilege=View RESTWS, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,225| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,227| In method UserService.savePrivilege. Arguments: Privilege=Manage RESTWS, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,234| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,278| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: webservices.rest.maxResultsDefault value: 50, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,292| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,296| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: webservices.rest.maxResultsAbsolute value: 100, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,312| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,314| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: webservices.rest.uriPrefix value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,321| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,322| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: webservices.rest.allowedips value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,342| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,345| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: webservices.rest.quietDocs value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,367| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,432| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: serialization.xstream.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,437| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,441| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: serialization.xstream.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,447| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,637| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uiframework.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,648| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,655| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uiframework.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,672| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,701| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uiframework.formatter.dateFormat value: dd.MMM.yyyy, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,706| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,707| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uiframework.formatter.dateAndTimeFormat value: dd.MMM.yyyy, HH:mm:ss, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,718| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,720| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uiframework.formatter.JSdateFormat value: DD.MMM.YYYY, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,734| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,735| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uiframework.formatter.JSdateAndTimeFormat value: DD.MMM.YYYY, HH:mm:ss, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,739| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,888| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uicommons.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,896| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:18,899| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uicommons.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:18,908| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:19,010| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: atlas.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:19,014| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:19,018| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: atlas.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:19,034| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:19,071| In method UserService.savePrivilege. Arguments: Privilege=Manage Atlas Data, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:19,077| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:19,088| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: atlas.numberOfPatients value: ?, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:19,105| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:19,107| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: atlas.numberOfObservations value: ?, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:19,120| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:19,123| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: atlas.numberOfEncounters value: ?, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:19,142| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:19,143| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: atlas.sendCounts value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:19,153| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:19,155| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: atlas.stopAskingToConfigure value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:19,170| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:19,292| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uilibrary.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:19,300| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:19,305| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uilibrary.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:19,313| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,485| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,495| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,503| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,508| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,525| In method UserService.savePrivilege. Arguments: Privilege=Provider Management API, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,532| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,536| In method UserService.savePrivilege. Arguments: Privilege=Provider Management API - Read-only, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,540| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,558| In method UserService.savePrivilege. Arguments: Privilege=Provider Management - Admin, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,566| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,569| In method UserService.savePrivilege. Arguments: Privilege=Provider Management Dashboard - View Historical, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,577| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,580| In method UserService.savePrivilege. Arguments: Privilege=Provider Management Dashboard - Edit Patients, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,593| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,594| In method UserService.savePrivilege. Arguments: Privilege=Provider Management Dashboard - View Patients, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,598| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,599| In method UserService.savePrivilege. Arguments: Privilege=Provider Management Dashboard - View Providers, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,605| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,611| In method UserService.savePrivilege. Arguments: Privilege=Provider Management Dashboard - Edit Providers, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,615| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,630| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.personAttributeTypes value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,641| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,643| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.providerSearchDisplayFields value: Identifier:provider.identifier|Given Name:provider.person.personName.givenName|Family Name:provider.person.personName.familyName|Role:provider.providerRole|Gender:provider.person.gender, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,655| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,656| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.providerListDisplayFields value: Identifier:provider.identifier|Given Name:provider.person.personName.givenName|Family Name:provider.person.personName.familyName|Role:provider.providerRole|Gender:provider.person.gender|Start Date:relationship.startDate, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,666| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,669| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.historicalProviderListDisplayFields value: Identifier:provider.identifier|Given Name:provider.person.personName.givenName|Family Name:provider.person.personName.familyName|Role:provider.providerRole|Gender:provider.person.gender|Start Date:relationship.startDate|End Date:relationship.endDate, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,685| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,686| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.patientSearchDisplayFields value: Identifier:patient.patientIdentifier.identifier|Given Name:patient.personName.givenName|Family Name:patient.personName.familyName|Age:patient.age|Gender:patient.gender, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,696| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,697| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.patientListDisplayFields value: Identifier:patient.patientIdentifier.identifier|Given Name:patient.personName.givenName|Family Name:patient.personName.familyName|Age:patient.age|Gender:patient.gender|Start Date:relationship.startDate, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,711| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,712| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.historicalPatientListDisplayFields value: Identifier:patient.patientIdentifier.identifier|Given Name:patient.personName.givenName|Family Name:patient.personName.familyName|Age:patient.age|Gender:patient.gender|Start Date:relationship.startDate|End Date:relationship.endDate, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,721| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,722| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.personSearchDisplayFields value: Given Name:person.personName.givenName|Family Name:person.personName.familyName|Age:person.age|Gender:person.gender, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,727| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,729| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.advancedSearchPersonAttributeType value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,741| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,742| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.addressWidget value: personAddress, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,753| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,754| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.restrictSearchToProvidersWithProviderRoles value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,778| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,780| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.locationTag value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,784| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,791| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.restrictedRoles value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,802| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:20,919| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 1.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:20,935| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,225| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 1.1, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,233| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,291| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 1.3, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,302| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,321| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 1.3.9, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,334| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,355| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 1.4, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,368| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,433| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 1.5, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,446| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,488| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 1.6, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,499| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,535| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 1.7, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,542| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,560| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 1.7.1, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,570| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,607| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 1.8, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,614| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,627| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 1.9, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,632| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,664| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 2.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,670| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,692| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 2.1, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,698| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,709| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 2.2, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,715| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,771| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 2.2.1, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,779| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,807| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 2.3, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,814| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,854| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 2.4, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,878| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,906| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 2.5, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,915| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:21,962| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 2.6, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:21,977| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,014| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 2.6.1, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,021| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,115| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 2.6.2, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,128| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,230| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 2.6.3, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,238| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,309| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 2.7.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,314| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,330| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 2.8.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,342| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,388| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 2.9.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,405| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,430| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.database_version value: 2.10.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,438| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,453| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,466| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,482| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,492| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,516| In method UserService.savePrivilege. Arguments: Privilege=Manage Address Hierarchy, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,520| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,546| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.allowFreetext value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,568| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,571| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.enableOverrideOfAddressPortlet value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,591| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,593| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.soundexProcessor value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,605| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,606| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.addressToEntryMapUpdaterLastStartTime value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,619| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,620| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.initializeAddressHierarchyCacheOnStartup value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,627| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,672| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlwidgets.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,682| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,690| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlwidgets.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,704| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,733| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: owa.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,742| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,745| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: owa.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,755| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,784| In method UserService.savePrivilege. Arguments: Privilege=Manage OWA, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,789| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,801| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: owa.appFolderPath value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,812| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,813| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: owa.appBaseUrl value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,827| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:22,828| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: owa.appStoreUrl value: http://modules.openmrs.org, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:22,834| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:27,785| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatamapping.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:27,794| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:27,797| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatamapping.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:27,801| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:27,830| In method UserService.savePrivilege. Arguments: Privilege=Manage Metadata Mapping, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:27,848| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:27,850| In method UserService.savePrivilege. Arguments: Privilege=View Metadata Via Mapping, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:27,857| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:27,881| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatamapping.addLocalMappings value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:27,886| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:28,167| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatasharing.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:28,177| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:28,179| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatasharing.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:28,183| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:28,206| In method UserService.savePrivilege. Arguments: Privilege=Share Metadata, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:28,210| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:28,222| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatasharing.persistIdsForClasses value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:28,231| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:28,232| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatasharing.preferredConceptSourceIds value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:28,257| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:28,258| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatasharing.enableOnTheFlyPackages value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:28,263| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:28,265| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatasharing.webservicesKey value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:28,275| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:28,411| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatadeploy.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:28,422| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:28,424| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatadeploy.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:28,431| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:30,142| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentry.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:30,161| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:30,172| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentry.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:30,177| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:30,208| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentry.dateFormat value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:30,215| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:30,216| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentry.timeFormat value: HH:mm, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:30,227| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:30,229| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentry.showDateFormat value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:30,234| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:30,235| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentry.datePickerYearsRange value: 110,20, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:30,249| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:30,250| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentry.archiveDir value: htmlformentry/archive/%Y/%m, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:30,276| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:30,277| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentry.archiveHtmlForms value: False, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:30,283| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:30,438| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: calculation.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:30,444| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:30,451| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: calculation.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:30,489| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:30,509| In method UserService.savePrivilege. Arguments: Privilege=Manage Token Registrations, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:30,519| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:30,520| In method UserService.savePrivilege. Arguments: Privilege=View Token Registrations, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:30,527| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:30,528| In method UserService.savePrivilege. Arguments: Privilege=View Calculations, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:30,535| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,014| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,018| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,021| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,026| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,053| In method UserService.savePrivilege. Arguments: Privilege=Manage Report Designs, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,061| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,062| In method UserService.savePrivilege. Arguments: Privilege=Manage Cohort Definitions, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,068| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,074| In method UserService.savePrivilege. Arguments: Privilege=Run Reports, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,082| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,083| In method UserService.savePrivilege. Arguments: Privilege=Manage Scheduled Report Tasks, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,087| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,090| In method UserService.savePrivilege. Arguments: Privilege=Manage Data Set Definitions, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,095| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,102| In method UserService.savePrivilege. Arguments: Privilege=Manage Reports, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,105| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,106| In method UserService.savePrivilege. Arguments: Privilege=Manage Indicator Definitions, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,110| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,112| In method UserService.savePrivilege. Arguments: Privilege=Manage Dimension Definitions, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,116| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,117| In method UserService.savePrivilege. Arguments: Privilege=Manage Report Definitions, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,124| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,138| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: report.deleteReportsAgeInHours value: 72, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,168| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,169| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.maxReportsToRun value: 1, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,180| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,181| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.maxCachedReports value: 10, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,186| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,189| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.includeDataExportsAsDataSetDefinitions value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,200| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,201| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.preferredIdentifierTypes value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,206| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,206| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.runReportCohortFilterMode value: showIfNull, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,214| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,215| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.dataEvaluationBatchSize value: -1, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,220| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,221| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.defaultDateFormat value: dd/MMM/yyyy, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,230| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,231| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.defaultLocale value: en, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,235| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,236| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.testPatientsCohortDefinition value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,245| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:34,250| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.evaluationLoggerEnabled value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:34,262| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:35,218| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emrapi.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:35,226| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:35,229| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emrapi.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:35,248| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:35,277| In method UserService.savePrivilege. Arguments: Privilege=Get conditions, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:35,282| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:35,287| In method UserService.savePrivilege. Arguments: Privilege=Edit conditions, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:35,293| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:35,305| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emr.encounterMatcher value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:35,317| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:35,318| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emrapi.suppressedDiagnosisConcepts value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:35,323| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:35,324| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emrapi.nonDiagnosisConceptSets value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:35,331| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:35,332| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emrapi.lastViewedPatientSizeLimit value: 50, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:35,339| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:35,340| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: conditionList.endReasonConceptSetUuid value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:35,358| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:35,361| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: conditionList.nonCodedUuid value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:35,370| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:35,371| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emrapi.EmrApiVisitAssignmentHandler.encounterTypeToNewVisitTypeMap value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:35,380| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:35,381| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emrapi.conceptSourcesForDiagnosisSearch value: ICD-10-WHO, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:35,386| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:35,387| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emrapi.useLegacyDiagnosisService value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:35,399| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,384| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentscheduling.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,389| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,392| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentscheduling.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,401| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,417| In method UserService.savePrivilege. Arguments: Privilege=View Patient Appointment History, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,421| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,422| In method UserService.savePrivilege. Arguments: Privilege=View Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,430| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,435| In method UserService.savePrivilege. Arguments: Privilege=View Appointments Statistics, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,440| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,441| In method UserService.savePrivilege. Arguments: Privilege=Manage Provider Schedules, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,449| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,455| In method UserService.savePrivilege. Arguments: Privilege=Manage Appointment Types, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,458| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,460| In method UserService.savePrivilege. Arguments: Privilege=Schedule Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,463| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,472| In method UserService.savePrivilege. Arguments: Privilege=View Appointment Types, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,483| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,484| In method UserService.savePrivilege. Arguments: Privilege=Update Appointment Status, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,488| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,489| In method UserService.savePrivilege. Arguments: Privilege=Request Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,492| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,493| In method UserService.savePrivilege. Arguments: Privilege=View Provider Schedules, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,499| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,500| In method UserService.savePrivilege. Arguments: Privilege=Squeezing Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,504| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,505| In method UserService.savePrivilege. Arguments: Privilege=Manage Appointments Settings, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,507| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,508| In method UserService.savePrivilege. Arguments: Privilege=Task: appointmentschedulingui.viewConfidential, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,524| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,526| In method UserService.savePrivilege. Arguments: Privilege=View Appointments Blocks, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,531| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,551| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentscheduling.phoneNumberPersonAttributeTypeId value: 8, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,576| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,577| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentscheduling.manageAppointmentsFormTimout value: 60, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,582| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,583| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentscheduling.defaultVisitType value: 1, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,592| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,593| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentscheduling.defaultTimeSlotDuration value: 60, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,598| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,600| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentscheduling.hideEndVisitButtons value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,615| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,777| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingrest.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,784| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:37,791| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingrest.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:37,795| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:40,458| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: idgen.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:40,467| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:40,469| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: idgen.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:40,482| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:40,499| In method UserService.savePrivilege. Arguments: Privilege=Generate Batch of Identifiers, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:40,509| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:40,510| In method UserService.savePrivilege. Arguments: Privilege=Upload Batch of Identifiers, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:40,514| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:40,515| In method UserService.savePrivilege. Arguments: Privilege=Manage Identifier Sources, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:40,532| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:40,535| In method UserService.savePrivilege. Arguments: Privilege=Manage Auto Generation Options, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:40,545| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:40,726| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencemetadata.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:40,730| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:40,732| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencemetadata.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:40,741| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:40,850| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencedemodata.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:40,872| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:40,874| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencedemodata.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:40,879| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:40,992| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:40,996| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:40,999| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,007| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,027| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.identifierSourceId value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,032| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,033| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.givenNameAutoSuggestList value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,043| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,045| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.familyNameAutoSuggestList value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,057| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,059| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.patientNameSearch value: registrationcore.BasicPatientNameSearch, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,074| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,075| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.fastSimilarPatientSearchAlgorithm value: registrationcore.BasicSimilarPatientSearchAlgorithm, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,084| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,093| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.preciseSimilarPatientSearchAlgorithm value: registrationcore.BasicExactPatientSearchAlgorithm, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,098| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,099| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.openempi.globalIdentifierDomainId value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,104| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,105| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.mpi.implementation value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,118| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,119| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.mpi.url value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,125| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,127| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.mpi.username value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,138| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,139| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.openempi.enableProbabilisticMatching value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,143| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,144| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.mpi.personIdentifierId value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,164| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,165| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.birthdateEstimationStartMonth value: 0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,184| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,187| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.biometrics.implementation value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,196| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,591| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appframework.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,607| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,609| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appframework.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,627| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,739| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: formentryapp.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,755| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,762| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: formentryapp.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,783| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,910| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergyui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,922| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:41,929| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergyui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:41,933| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,077| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,092| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,096| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,103| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,213| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: adminui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,223| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,225| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: adminui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,229| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,238| In method UserService.savePrivilege. Arguments: Privilege=App: adminui.configuremetadata, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,243| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,488| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,496| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,498| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,503| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,518| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.enrollInProgram, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,523| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,524| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.dataManagement, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,527| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,528| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.mergePatient, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,542| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,548| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.summaryDashboard, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,555| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,556| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.editPatientProgram, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,567| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,569| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.createVisit, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,572| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,573| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.patientDashboard, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,584| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,585| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.createRetrospectiveVisit, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,588| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,589| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.deletePatient, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,592| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,593| In method UserService.savePrivilege. Arguments: Privilege=Task: Manage Condition Lists, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,600| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,601| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.patientVisits, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,607| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,608| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.activeVisits, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,611| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,612| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.endVisit, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,616| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,617| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.deletePatientProgram, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,627| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,628| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.findPatient, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,631| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,632| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.markPatientDead, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,637| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,638| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.editRelationships, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,644| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,645| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.mergeVisits, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,647| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,675| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.defaultPatientIdentifierLocation value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,683| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,684| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.recentDiagnosisPeriodInDays value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,692| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,693| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.dashboardUrl value: /coreapps/clinicianfacing/patient.page?patientId={{patientId}}, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,701| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,702| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.visitsPageUrl value: /coreapps/patientdashboard/patientDashboard.page?patientId={{patientId}}#visits, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,711| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,712| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.visitsPageWithSpecificVisitUrl value: /coreapps/patientdashboard/patientDashboard.page?patientId={{patientId}}&visitId={{visit.id}}#, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,720| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,722| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.searchDelayShort value: 300, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,731| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,732| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.searchDelayLong value: 1000, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,742| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,743| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.patientDashboardEncounterCount value: 100, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,748| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,749| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.visitTypeColors value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,760| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,764| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.showVisitTypeOnPatientHeaderSection value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,779| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,780| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.transferEncounterUuid value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,787| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,789| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.conceptStickyNote value: CIEL:165095, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,807| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,928| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationapp.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,936| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,938| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationapp.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,943| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:42,966| In method UserService.savePrivilege. Arguments: Privilege=App: registrationapp.registerPatient, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:42,970| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:43,090| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:43,096| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:43,098| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:43,107| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:43,225| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentschedulingui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:43,232| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:43,234| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentschedulingui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:43,239| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:43,246| In method UserService.savePrivilege. Arguments: Privilege=Task: appointmentschedulingui.overbookAppointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:43,257| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:43,263| In method UserService.savePrivilege. Arguments: Privilege=App: appointmentschedulingui.appointmentTypes, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:43,266| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:43,269| In method UserService.savePrivilege. Arguments: Privilege=App: appointmentschedulingui.viewAppointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:43,274| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:43,281| In method UserService.savePrivilege. Arguments: Privilege=App: appointmentschedulingui.home, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:43,284| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:43,286| In method UserService.savePrivilege. Arguments: Privilege=App: appointmentschedulingui.providerSchedules, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:43,290| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:43,291| In method UserService.savePrivilege. Arguments: Privilege=Task: appointmentschedulingui.bookAppointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:43,301| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:43,302| In method UserService.savePrivilege. Arguments: Privilege=Task: appointmentschedulingui.requestAppointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:43,306| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:43,315| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentschedulingui.includeWeekends value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:43,324| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:43,463| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentryui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:43,479| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:43,481| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentryui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:43,486| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:46,175| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: chartsearch.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:46,183| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:46,193| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: chartsearch.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:46,197| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:46,218| In method UserService.savePrivilege. Arguments: Privilege=Manage synonym group, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:46,222| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:46,223| In method UserService.savePrivilege. Arguments: Privilege=Patient Dashboard - View Chart Search Section, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:46,227| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:46,229| In method UserService.savePrivilege. Arguments: Privilege=Manage Synonym Groups, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:46,233| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:46,234| In method UserService.savePrivilege. Arguments: Privilege=Run Chart Search commands, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:46,238| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:46,258| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: chartsearch.useDedicatedSolrServer value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:46,271| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:46,274| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: chartsearch.httpSolrUrl value: http://localhost, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:46,284| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:46,466| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referenceapplication.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:46,470| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:46,472| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referenceapplication.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:46,480| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:46,504| In method UserService.savePrivilege. Arguments: Privilege=App: referenceapplication.styleGuide, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:46,510| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:46,512| In method UserService.savePrivilege. Arguments: Privilege=App: referenceapplication.legacyAdmin, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:46,516| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:46,530| In method UserService.savePrivilege. Arguments: Privilege=App: referenceapplication.vitals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:46,537| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:46,538| In method UserService.savePrivilege. Arguments: Privilege=App: referenceapplication.manageApps, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:46,555| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:18:47,536| In method SchedulerService.saveToMemento. Arguments: 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:18:47,539| Exiting method saveToMemento
INFO - EhCacheManagerFactoryBean.destroy(181) |2019-02-17 22:18:47,640| Shutting down EhCache CacheManager
INFO - ServiceContext.startRefreshingContext(808) |2019-02-17 22:18:47,641| Refreshing Context
INFO - EhCacheManagerFactoryBean.afterPropertiesSet(129) |2019-02-17 22:19:06,023| Initializing EhCache CacheManager
WARN - SimpleUrlHandlerMapping.registerHandlers(115) |2019-02-17 22:19:51,645| Neither 'urlMap' nor 'mappings' set on SimpleUrlHandlerMapping
WARN - SimpleUrlHandlerMapping.registerHandlers(115) |2019-02-17 22:19:56,259| Neither 'urlMap' nor 'mappings' set on SimpleUrlHandlerMapping
INFO - ServiceContext.doneRefreshingContext(819) |2019-02-17 22:19:56,271| Done refreshing Context
WARN - IdgenTask.run(32) |2019-02-17 22:19:57,228| Not running scheduled task. DaemonToken = null; enabled = false
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:03,698| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: atlas.id value: 9c4623b3-070e-4b92-8c88-b02df3673172, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:03,718| Exiting method saveGlobalProperty
WARN - AddressConfigurationLoader.loadAddressConfiguration(64) |2019-02-17 22:20:03,728| Address hierarchy configuration file appears invalid, skipping the loading process: addressConfiguration.xml
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:03,737| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: owa.appFolderPath value: /home/jadeniran85/openmrs/server/owa, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:03,740| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,055| In method UserService.saveRole. Arguments: Role=Privilege Level: Full, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,082| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,083| In method UserService.saveRole. Arguments: Role=Privilege Level: High, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,094| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,179| In method UserService.saveRole. Arguments: Role=Privilege Level: Full, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,360| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,378| In method UserService.saveRole. Arguments: Role=Privilege Level: High, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,381| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,410| In method MetadataMappingService.saveMetadataSource. Arguments: MetadataSource=MetadataSource[hashCode=81d289f5,uuid=779376a4-67d2-43dc-8cf2-286ab7e88ad3], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,426| Exiting method saveMetadataSource
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,436| In method MetadataMappingService.saveMetadataSet. Arguments: MetadataSet=MetadataSet[hashCode=c37bd740,uuid=ee457dd8-9b56-4c84-b78d-7bec773cbedf], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,461| Exiting method saveMetadataSet
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,480| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=6647a73f,uuid=b3df68c2-a577-4f8f-ba12-3ab7f855ef92], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,495| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,501| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=962d4661,uuid=1ef6458e-11ee-4991-a8b2-949461bdb8f6], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,507| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,516| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=85b5e6cd,uuid=113a821b-3e7e-4a7a-8b3b-ba8f982b9ad6], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,528| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,538| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=4454c57e,uuid=07ced1e0-c726-49df-9ea4-81c961258426], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,549| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,563| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=4a8ef1f4,uuid=b75f1fa3-5f74-424b-b249-c0a7174f6405], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,577| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,581| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=5a118721,uuid=97d8e9e6-fedd-426b-bd7b-29a4384bd75a], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,592| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,597| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=1cad6704,uuid=05fb4549-9da2-4d1a-aa72-706f90131ddc], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,609| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,614| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=4a1af326,uuid=851561b5-a104-4149-bf1b-0a2ef83090a5], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,623| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,627| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=7e332090,uuid=2c22d63c-37bd-4a65-8c78-f1625a10067b], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,637| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,642| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=97817d3a,uuid=35bc70f8-84bf-4d73-ab45-e63a624ce28c], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,660| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,668| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=bef75e8b,uuid=635220c4-5461-4d53-876f-8c8523b3f8b3], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,682| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,686| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=593aa306,uuid=c176b305-8068-4adb-9cff-2f34ce383740], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,695| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,699| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=36b5d76a,uuid=c74c8e77-4a58-4dd3-b384-3701330ccc55], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,714| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,719| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=f786e372,uuid=928b5c3e-7ceb-45b0-a453-295bd641394e], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,727| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,731| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=27c1af63,uuid=becac7a8-aab9-4cac-a6fd-7997910a0a0f], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,744| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,749| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=837c79a7,uuid=7f7e20b3-ef94-4a4a-bef1-a500eb82eb25], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,769| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,806| In method PersonService.savePerson. Arguments: Person=Person(personId=null), 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,875| Exiting method savePerson
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,890| In method ProviderService.saveProvider. Arguments: Provider=[Provider: providerId:null providerName:[Unknown Provider] ], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,903| Exiting method saveProvider
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,905| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=96672df7,uuid=a250fc64-d72c-461d-b1fd-37091f4d150f], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,910| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,920| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: visits.assignmentHandler value: org.openmrs.module.emrapi.adt.EmrApiVisitAssignmentHandler, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,923| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:04,941| In method ConceptService.saveConceptSource. Arguments: ConceptSource=ConceptSource[hashCode=300087d4,uuid=edd52713-8887-47b7-ba9e-6e1148824ca4], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:04,964| Exiting method saveConceptSource
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:05,016| In method PatientService.savePatientIdentifierType. Arguments: PatientIdentifierType=OpenMRS ID, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:05,032| Exiting method savePatientIdentifierType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:05,077| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=85b5e6cd,uuid=113a821b-3e7e-4a7a-8b3b-ba8f982b9ad6], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:05,087| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:05,101| In method ConceptService.purgeConceptClass. Arguments: ConceptClass=ConceptClass[hashCode=a7612e8c,uuid=8e071bfe-520c-44c0-a89b-538e9129b42a], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:05,114| Exiting method purgeConceptClass
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:05,321| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:05,350| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:05,359| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:05,500| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:05,581| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:05,608| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:06,164| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:06,169| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:06,190| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:06,481| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:06,725| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:06,843| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:07,006| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:07,009| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:07,028| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:07,216| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:07,321| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:07,370| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:07,986| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:07,991| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:07,999| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:08,807| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:09,593| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:09,771| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:09,776| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:09,787| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:09,900| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:09,938| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:09,955| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:10,316| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:10,318| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:10,324| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:10,522| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
WARN - AbstractTableMetaData.getDataTypeFactory(166) |2019-02-17 22:20:10,704| Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'MySQL' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products.
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,093| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencemetadata.installedVersion value: 15, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,101| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,134| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.systemAdministration, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,135| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,144| In method UserService.savePrivilege. Arguments: Privilege=App: referenceapplication.legacyAdmin, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,154| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,160| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.activeVisits, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,162| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,194| In method UserService.savePrivilege. Arguments: Privilege=App: atlas.manage, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,200| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,211| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.configuremetadata, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,214| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,218| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.findPatient, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,219| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,231| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.patientDashboard, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,232| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,241| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.patientVisits, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,241| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,245| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.systemAdministration, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,254| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,270| In method UserService.savePrivilege. Arguments: Privilege=App: formentryapp.forms, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,273| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,278| In method UserService.savePrivilege. Arguments: Privilege=App: referenceapplication.vitals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,285| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,290| In method UserService.savePrivilege. Arguments: Privilege=App: registrationapp.registerPatient, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,291| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,303| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.createRetrospectiveVisit, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,303| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,312| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.createVisit, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,312| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,321| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.endVisit, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,321| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,335| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.mergeVisits, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,335| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,351| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.simpleAdmission, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,361| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,367| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.simpleDischarge, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,372| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,389| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.simpleTransfer, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,390| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,398| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.simpleVisitNote, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,399| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,409| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.vitals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,410| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,415| In method UserService.savePrivilege. Arguments: Privilege=Task: Modify Allergies, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,420| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,431| In method UserService.savePrivilege. Arguments: Privilege=Task: emr.patient.encounter.delete, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,431| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,435| In method UserService.savePrivilege. Arguments: Privilege=Task: emr.patient.encounter.edit, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,436| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,476| In method UserService.saveRole. Arguments: Role=Application: Administers System, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,482| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,500| In method UserService.saveRole. Arguments: Role=Application: Configures Metadata, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,500| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,514| In method UserService.saveRole. Arguments: Role=Application: Configures Forms, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,515| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,524| In method UserService.saveRole. Arguments: Role=Application: Manages Atlas, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,528| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,538| In method UserService.saveRole. Arguments: Role=Application: Registers Patients, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,539| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,554| In method UserService.saveRole. Arguments: Role=Application: Enters Vitals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,559| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,569| In method UserService.saveRole. Arguments: Role=Application: Uses Capture Vitals App, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,572| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,586| In method UserService.saveRole. Arguments: Role=Application: Uses Patient Summary, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,587| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,598| In method UserService.saveRole. Arguments: Role=Application: Writes Clinical Notes, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,599| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,624| In method UserService.saveRole. Arguments: Role=Application: Enters ADT Events, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,625| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,638| In method UserService.saveRole. Arguments: Role=Application: Records Allergies, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,639| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,660| In method UserService.saveRole. Arguments: Role=Application: Has Super User Privileges, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,668| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,689| In method UserService.saveRole. Arguments: Role=Application: Sees Appointment Schedule, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,692| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,713| In method UserService.saveRole. Arguments: Role=Application: Edits Existing Encounters, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,714| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,736| In method UserService.saveRole. Arguments: Role=Application: Requests Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,738| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,773| In method UserService.saveRole. Arguments: Role=Application: Schedules Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,774| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,801| In method UserService.saveRole. Arguments: Role=Application: Schedules And Overbooks Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,802| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,817| In method UserService.saveRole. Arguments: Role=Application: Manages Provider Schedules, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,818| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,830| In method UserService.saveRole. Arguments: Role=Application: Configures Appointment Scheduling, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,835| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,876| In method UserService.saveRole. Arguments: Role=Organizational: Doctor, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,878| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,919| In method UserService.saveRole. Arguments: Role=Organizational: Nurse, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,920| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:14,963| In method UserService.saveRole. Arguments: Role=Organizational: Registration Clerk, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:14,964| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,042| In method UserService.saveRole. Arguments: Role=Organizational: System Administrator, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,042| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,083| In method UserService.saveRole. Arguments: Role=Organizational: Hospital Administrator, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,084| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,201| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=One time, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,204| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,221| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Every 30 min, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,222| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,238| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Every hour, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,239| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,275| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Every two hours, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,277| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,288| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Every three hours, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,294| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,306| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Every four hours, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,311| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,324| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Every five hours, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,325| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,357| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Every six hours, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,359| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,375| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Every eight hours, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,376| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,394| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Every twelve hours, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,395| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,412| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Twice daily, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,421| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,434| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Twice daily before meals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,436| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,470| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Twice daily after meals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,474| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,491| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Twice daily with meals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,493| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,508| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Every twenty-four hours, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,515| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,533| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Once daily, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,535| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,555| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Once daily, at bedtime, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,561| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,580| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Once daily, in the evening, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,581| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,592| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Once daily, in the morning, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,597| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,613| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Thrice daily, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,620| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,628| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Thrice daily, after meals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,637| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,643| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Thrice daily, before meals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,649| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,674| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Thrice daily, with meals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,680| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,693| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Four times daily, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,697| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,714| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Four times daily, after meals and at bedtime, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,715| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,732| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Four times daily, before meals and at bedtime, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,734| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,759| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Every forty-eight hours, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,760| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,784| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Every thirty-six hours, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,785| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,803| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Every seventy-two hours, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,805| Exiting method saveOrderFrequency
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,823| In method OrderService.saveOrderFrequency. Arguments: OrderFrequency=Every Monday, Wednesday and Friday, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,824| Exiting method saveOrderFrequency
INFO - SerializationServiceImpl.getDefaultSerializer(71) |2019-02-17 22:20:15,880| No default serializer specified - using builtin SimpleXStreamSerializer.
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:15,975| In method MetadataSharingService.purgePreviousAssessments. Arguments: 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:15,998| Exiting method purgePreviousAssessments
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:16,116| In method MetadataService.createBlob. Arguments: byte[]=[B@74e2c288, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:16,119| Exiting method createBlob
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:16,130| In method MetadataSharingService.purgePreviousAssessments. Arguments: 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:16,132| Exiting method purgePreviousAssessments
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:16,149| In method MetadataService.createBlob. Arguments: byte[]=[B@28a2a1a8, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:16,154| Exiting method createBlob
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:16,158| In method MetadataSharingService.purgePreviousAssessments. Arguments: 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:16,170| Exiting method purgePreviousAssessments
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:16,182| In method MetadataService.createBlob. Arguments: byte[]=[B@2fc00ebf, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:16,182| Exiting method createBlob
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:16,190| In method MetadataSharingService.purgePreviousAssessments. Arguments: 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:16,194| Exiting method purgePreviousAssessments
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:16,207| In method MetadataService.createBlob. Arguments: byte[]=[B@4cbaf5b0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:16,207| Exiting method createBlob
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:16,210| In method MetadataSharingService.purgePreviousAssessments. Arguments: 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:16,213| Exiting method purgePreviousAssessments
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:16,229| In method MetadataService.createBlob. Arguments: byte[]=[B@c2cf9c8, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:16,230| Exiting method createBlob
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:16,233| In method MetadataSharingService.purgePreviousAssessments. Arguments: 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:16,234| Exiting method purgePreviousAssessments
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:16,245| In method MetadataService.createBlob. Arguments: byte[]=[B@321a9f18, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:16,250| Exiting method createBlob
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:16,265| In method MetadataSharingService.purgePreviousAssessments. Arguments: 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:16,269| Exiting method purgePreviousAssessments
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:16,276| In method MetadataService.createBlob. Arguments: byte[]=[B@230bdb6e, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:16,277| Exiting method createBlob
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:36,707| In method VisitService.saveVisitType. Arguments: VisitType=VisitType[hashCode=a72d1e1b,uuid=7b0f5697-27e3-40c4-8bae-f4049abfb4ed], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:36,714| Exiting method saveVisitType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:36,716| In method EncounterService.saveEncounterType. Arguments: EncounterType=EncounterType[hashCode=22ddff21,uuid=181820aa-88c9-479b-9077-af92f5364329], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:36,726| Exiting method saveEncounterType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:36,731| In method EncounterService.saveEncounterType. Arguments: EncounterType=EncounterType[hashCode=7d875bec,uuid=e22e39fd-7db2-45e7-80f1-60fa0d5a4378], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:36,740| Exiting method saveEncounterType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:36,744| In method EncounterService.saveEncounterType. Arguments: EncounterType=EncounterType[hashCode=87e74d4d,uuid=d7151f82-c1f3-4152-a605-2f9ea7414a79], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:36,768| Exiting method saveEncounterType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:36,771| In method EncounterService.saveEncounterType. Arguments: EncounterType=EncounterType[hashCode=ad2bb5c2,uuid=25a042b2-60bc-4940-a909-debd098b7d82], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:36,775| Exiting method saveEncounterType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:36,777| In method EncounterService.saveEncounterType. Arguments: EncounterType=EncounterType[hashCode=cf23421f,uuid=ca3aed11-1aa4-42a1-b85c-8332fc8001fc], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:36,787| Exiting method saveEncounterType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:36,790| In method EncounterService.saveEncounterType. Arguments: EncounterType=EncounterType[hashCode=fa5e2453,uuid=7b68d557-85ef-4fc8-b767-4fa4f5eb5c23], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:36,792| Exiting method saveEncounterType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:36,908| In method MetadataSharingService.saveImportedPackage. Arguments: ImportedPackage=ImportedPackage[hashCode=e3464d7c,uuid=a70f53a7-6126-499a-9d6f-f068d3b221dc], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:36,915| Exiting method saveImportedPackage
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:37,108| In method PersonService.savePersonAttributeType. Arguments: PersonAttributeType=Telephone Number, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:37,122| Exiting method savePersonAttributeType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:37,169| In method PersonService.savePersonAttributeType. Arguments: PersonAttributeType=Unknown patient, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:37,193| Exiting method savePersonAttributeType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:37,197| In method PersonService.savePersonAttributeType. Arguments: PersonAttributeType=Test Patient, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:37,219| Exiting method savePersonAttributeType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:37,261| In method MetadataSharingService.saveImportedPackage. Arguments: ImportedPackage=ImportedPackage[hashCode=da18c462,uuid=eb0feeb7-ed7d-4892-8d09-29638ab62a7e], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:37,278| Exiting method saveImportedPackage
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:37,479| In method VisitService.saveVisitType. Arguments: VisitType=VisitType[hashCode=a72d1e1b,uuid=7b0f5697-27e3-40c4-8bae-f4049abfb4ed], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:37,495| Exiting method saveVisitType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:37,504| In method MetadataSharingService.saveImportedPackage. Arguments: ImportedPackage=ImportedPackage[hashCode=1d76d9b8,uuid=824d49e2-c8a4-477f-a403-50324f9854fd], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:37,516| Exiting method saveImportedPackage
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:37,684| In method LocationService.saveLocationTag. Arguments: LocationTag=Admission Location, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:37,691| Exiting method saveLocationTag
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:37,691| In method LocationService.saveLocationTag. Arguments: LocationTag=Login Location, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:37,692| Exiting method saveLocationTag
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:37,698| In method LocationService.saveLocationTag. Arguments: LocationTag=Transfer Location, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:37,699| Exiting method saveLocationTag
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:37,701| In method LocationService.saveLocationTag. Arguments: LocationTag=Visit Location, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:37,709| Exiting method saveLocationTag
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:37,733| In method MetadataSharingService.saveImportedPackage. Arguments: ImportedPackage=ImportedPackage[hashCode=f1f30ef6,uuid=b79c703a-3a42-41e0-8f48-3c7c49853946], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:37,742| Exiting method saveImportedPackage
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:37,972| In method ProviderManagementService.saveProviderRole. Arguments: ProviderRole=ProviderRole{providerRoleId=null, name=Clinical Doctor}, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:37,978| Exiting method saveProviderRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:37,980| In method ProviderManagementService.saveProviderRole. Arguments: ProviderRole=ProviderRole{providerRoleId=null, name=Clerk}, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:37,989| Exiting method saveProviderRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:37,991| In method ProviderManagementService.saveProviderRole. Arguments: ProviderRole=ProviderRole{providerRoleId=null, name=Nurse}, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:37,992| Exiting method saveProviderRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:38,004| In method MetadataSharingService.saveImportedPackage. Arguments: ImportedPackage=ImportedPackage[hashCode=f44ba0b4,uuid=e12cd04a-0ee9-42bb-afc6-33f82d54ab96], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:38,023| Exiting method saveImportedPackage
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:38,227| In method EncounterService.saveEncounterRole. Arguments: EncounterRole=EncounterRole: [(no ID) ], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:38,242| Exiting method saveEncounterRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:38,275| In method MetadataSharingService.saveImportedPackage. Arguments: ImportedPackage=ImportedPackage[hashCode=960e3fb6,uuid=9d0b7d2f-5833-47d3-b986-a53398d3b619], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:38,288| Exiting method saveImportedPackage
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:38,434| In method EncounterService.saveEncounterType. Arguments: EncounterType=EncounterType[hashCode=cf23421f,uuid=ca3aed11-1aa4-42a1-b85c-8332fc8001fc], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:38,437| Exiting method saveEncounterType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:38,449| In method EncounterService.saveEncounterType. Arguments: EncounterType=EncounterType[hashCode=9d2fe9fc,uuid=67a71486-1a54-468f-ac3e-7091a9a79584], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:38,457| Exiting method saveEncounterType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:38,476| In method MetadataSharingService.saveImportedPackage. Arguments: ImportedPackage=ImportedPackage[hashCode=1ae82a12,uuid=7830c468-24f6-4689-91cd-6f27fd94dbfc], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:38,478| Exiting method saveImportedPackage
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:38,717| In method UserService.saveRole. Arguments: Role=Application: Administers System, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:38,738| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:38,791| In method UserService.saveRole. Arguments: Role=Application: Configures Appointment Scheduling, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:38,800| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:38,833| In method UserService.saveRole. Arguments: Role=Application: Configures Forms, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:38,857| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:38,883| In method UserService.saveRole. Arguments: Role=Application: Configures Metadata, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:38,896| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:38,905| In method UserService.saveRole. Arguments: Role=Application: Edits Existing Encounters, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:38,923| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:38,959| In method UserService.saveRole. Arguments: Role=Application: Enters ADT Events, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:38,979| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,006| In method UserService.saveRole. Arguments: Role=Application: Enters Vitals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,019| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,050| In method UserService.saveRole. Arguments: Role=Application: Has Super User Privileges, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,075| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,119| In method UserService.saveRole. Arguments: Role=Application: Manages Atlas, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,128| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,152| In method UserService.saveRole. Arguments: Role=Application: Manages Provider Schedules, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,170| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,199| In method UserService.saveRole. Arguments: Role=Application: Records Allergies, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,208| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,234| In method UserService.saveRole. Arguments: Role=Application: Registers Patients, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,246| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,273| In method UserService.saveRole. Arguments: Role=Application: Requests Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,283| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,300| In method UserService.saveRole. Arguments: Role=Application: Schedules And Overbooks Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,310| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,326| In method UserService.saveRole. Arguments: Role=Application: Schedules Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,340| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,372| In method UserService.saveRole. Arguments: Role=Application: Sees Appointment Schedule, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,383| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,401| In method UserService.saveRole. Arguments: Role=Application: Uses Capture Vitals App, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,405| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,419| In method UserService.saveRole. Arguments: Role=Application: Uses Patient Summary, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,443| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,473| In method UserService.saveRole. Arguments: Role=Application: Writes Clinical Notes, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,483| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,513| In method DefinitionService.saveDefinition. Arguments: Definition=Number of Visits, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,513| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=Number of Visits, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,567| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,567| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,603| In method ReportService.saveReportDesign. Arguments: ReportDesign=Excel, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,608| Exiting method saveReportDesign
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,615| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.reportManager.9667a78e-4881-11e7-a919-92ebcb67fe33.version value: 1.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,634| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,637| In method DefinitionService.saveDefinition. Arguments: Definition=Number of Admissions, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,637| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=Number of Admissions, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,666| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,669| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,685| In method ReportService.saveReportDesign. Arguments: ReportDesign=Excel, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,693| Exiting method saveReportDesign
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,706| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.reportManager.d39509bc-4881-11e7-a919-92ebcb67fe33.version value: 1.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,715| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,718| In method DefinitionService.saveDefinition. Arguments: Definition=List of Providers, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,719| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=List of Providers, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,741| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,743| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,755| In method ReportService.saveReportDesign. Arguments: ReportDesign=Excel, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,760| Exiting method saveReportDesign
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,769| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.reportManager.d3950ea8-4881-11e7-a919-92ebcb67fe33.version value: 1.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,778| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,789| In method DefinitionService.saveDefinition. Arguments: Definition=List of Patients for this Provider, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,790| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=List of Patients for this Provider, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,805| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,805| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,810| In method ReportService.saveReportDesign. Arguments: ReportDesign=Excel, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,811| Exiting method saveReportDesign
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,815| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.reportManager.e451ae04-4881-11e7-a919-92ebcb67fe45.version value: 1.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,826| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,831| In method DefinitionService.saveDefinition. Arguments: Definition=Number of Transfers, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,831| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=Number of Transfers, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,866| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,867| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,875| In method ReportService.saveReportDesign. Arguments: ReportDesign=Excel, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,877| Exiting method saveReportDesign
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,885| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.reportManager.b39c4c4c-4881-11e7-a919-92ebcb67fe33.version value: 1.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,896| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,905| In method DefinitionService.saveDefinition. Arguments: Definition=List of New Patient Registrations, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,911| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=List of New Patient Registrations, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,916| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,919| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,927| In method ReportService.saveReportDesign. Arguments: ReportDesign=Excel, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,928| Exiting method saveReportDesign
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,939| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.reportManager.e451a9d6-4881-11e7-a919-92ebcb67fe33.version value: 1.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,961| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,979| In method DefinitionService.saveDefinition. Arguments: Definition=Number of All Discharges, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:39,979| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=Number of All Discharges, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,994| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:39,994| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,000| In method ReportService.saveReportDesign. Arguments: ReportDesign=Excel, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,001| Exiting method saveReportDesign
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,005| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.reportManager.d1a00e10-cecb-4775-8c4f-2ed0b059d7b9.version value: 1.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,013| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,020| In method DefinitionService.saveDefinition. Arguments: Definition=List of Patients affected by this Diagnosis, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,021| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=List of Patients affected by this Diagnosis, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,045| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,046| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,058| In method ReportService.saveReportDesign. Arguments: ReportDesign=Excel, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,060| Exiting method saveReportDesign
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,080| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.reportManager.e451ae04-4881-11e7-a919-92ebcb67fe24.version value: 1.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,085| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,096| In method DefinitionService.saveDefinition. Arguments: Definition=List of Users, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,096| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=List of Users, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,107| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,107| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,111| In method ReportService.saveReportDesign. Arguments: ReportDesign=Excel, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,113| Exiting method saveReportDesign
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,116| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.reportManager.d3950d7c-4881-11e7-a919-92ebcb67fe33.version value: 1.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,133| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,136| In method DefinitionService.saveDefinition. Arguments: Definition=Number of Visit Notes, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,137| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=Number of Visit Notes, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,191| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,192| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,198| In method ReportService.saveReportDesign. Arguments: ReportDesign=Excel, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,199| Exiting method saveReportDesign
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,207| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.reportManager.9667ac52-4881-11e7-a919-92ebcb67fe33.version value: 1.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,214| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,230| In method DefinitionService.saveDefinition. Arguments: Definition=Number of All Admissions, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,231| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=Number of All Admissions, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,243| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,244| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,259| In method ReportService.saveReportDesign. Arguments: ReportDesign=Excel, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,260| Exiting method saveReportDesign
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,274| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.reportManager.923b9664-84c3-4988-a888-458c42405605.version value: 1.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,290| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,294| In method DefinitionService.saveDefinition. Arguments: Definition=Number of Discharges, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,295| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=Number of Discharges, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,326| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,328| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,344| In method ReportService.saveReportDesign. Arguments: ReportDesign=Excel, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,358| Exiting method saveReportDesign
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,370| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.reportManager.b39c5070-4881-11e7-a919-92ebcb67fe33.version value: 1.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,389| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,398| In method DefinitionService.saveDefinition. Arguments: Definition=Number of All Transfers, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,399| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=Number of All Transfers, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,433| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,433| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,490| In method ReportService.saveReportDesign. Arguments: ReportDesign=Excel, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,502| Exiting method saveReportDesign
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,508| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.reportManager.ad418753-8a1c-4f5f-8c61-5599369bd5d2.version value: 1.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,517| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,551| In method DefinitionService.saveDefinition. Arguments: Definition=Number of Patient Registrations, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,552| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=Number of Patient Registrations, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,601| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,602| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,607| In method ReportService.saveReportDesign. Arguments: ReportDesign=Excel, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,609| Exiting method saveReportDesign
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,619| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.reportManager.d71b5170-5283-11e7-b114-b2f933d5fe66.version value: 1.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,630| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,634| In method DefinitionService.saveDefinition. Arguments: Definition=List of Diagnosis, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,635| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=List of Diagnosis, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,660| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,660| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,665| In method ReportService.saveReportDesign. Arguments: ReportDesign=Excel, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,671| Exiting method saveReportDesign
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,678| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.reportManager.e451ae04-4881-11e7-a919-92ebcb67fe33.version value: 1.0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,692| Exiting method saveGlobalProperty
INFO - SerializationServiceImpl.getDefaultSerializer(71) |2019-02-17 22:20:40,695| No default serializer specified - using builtin SimpleXStreamSerializer.
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,702| In method MetadataSharingService.purgePreviousAssessments. Arguments: 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,708| Exiting method purgePreviousAssessments
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,717| In method MetadataService.createBlob. Arguments: byte[]=[B@7027f5a6, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,718| Exiting method createBlob
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,984| In method LocationService.saveLocationTag. Arguments: LocationTag=Login Location, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,989| Exiting method saveLocationTag
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:40,993| In method LocationService.saveLocation. Arguments: Location=Pharmacy, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:40,999| Exiting method saveLocation
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,008| In method LocationService.saveLocation. Arguments: Location=Laboratory, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,009| Exiting method saveLocation
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,013| In method LocationService.saveLocationTag. Arguments: LocationTag=Transfer Location, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,018| Exiting method saveLocationTag
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,018| In method LocationService.saveLocationTag. Arguments: LocationTag=Admission Location, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,019| Exiting method saveLocationTag
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,025| In method LocationService.saveLocation. Arguments: Location=Isolation Ward, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,027| Exiting method saveLocation
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,028| In method LocationService.saveLocation. Arguments: Location=Registration Desk, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,031| Exiting method saveLocation
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,041| In method LocationService.saveLocation. Arguments: Location=Inpatient Ward, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,043| Exiting method saveLocation
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,060| In method LocationService.saveLocation. Arguments: Location=Outpatient Clinic, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,065| Exiting method saveLocation
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,066| In method LocationService.saveLocationTag. Arguments: LocationTag=Visit Location, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,066| Exiting method saveLocationTag
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,068| In method LocationService.saveLocation. Arguments: Location=Amani Hospital, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,078| Exiting method saveLocation
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,134| In method MetadataSharingService.saveImportedPackage. Arguments: ImportedPackage=ImportedPackage[hashCode=ef69e3f2,uuid=39b85378-0899-4cf0-abf6-779b5968a80a], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,140| Exiting method saveImportedPackage
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,232| In method ProviderService.saveProvider. Arguments: Provider=[Provider: providerId:1 providerName:[Super User] ], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,259| Exiting method saveProvider
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,263| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.identifierSourceId value: 1, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,276| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,279| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencedemodata.createDemoPatientsOnNextStartup value: 0, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,290| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,292| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: layout.address.format value: <org.openmrs.layout.address.AddressTemplate>
     <nameMappings class="properties">
       <property name="postalCode" value="Location.postalCode"/>
       <property name="address2" value="Location.address2"/>
       <property name="address1" value="Location.address1"/>
       <property name="country" value="Location.country"/>
       <property name="stateProvince" value="Location.stateProvince"/>
       <property name="cityVillage" value="Location.cityVillage"/>
     </nameMappings>
     <sizeMappings class="properties">
       <property name="postalCode" value="10"/>
       <property name="address2" value="40"/>
       <property name="address1" value="40"/>
       <property name="country" value="10"/>
       <property name="stateProvince" value="10"/>
       <property name="cityVillage" value="10"/>
     </sizeMappings>
     <lineByLineFormat>
       <string>address1</string>
       <string>address2</string>
       <string>cityVillage stateProvince country postalCode</string>
     </lineByLineFormat>
   </org.openmrs.layout.address.AddressTemplate>, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,298| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,308| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: patient.nameValidationRegex value: null, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,316| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,522| In method UserService.createUser. Arguments: User=clerk, String=<Arg value ignored>, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,628| Exiting method createUser
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,689| In method UserService.createUser. Arguments: User=nurse, String=<Arg value ignored>, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,753| Exiting method createUser
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,799| In method UserService.createUser. Arguments: User=doctor, String=<Arg value ignored>, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,870| Exiting method createUser
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,910| In method UserService.createUser. Arguments: User=sysadmin, String=<Arg value ignored>, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,969| Exiting method createUser
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:41,990| In method ProviderService.saveProvider. Arguments: Provider=[Provider: providerId:null providerName:[John Smith] ], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:41,992| Exiting method saveProvider
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,000| In method ProviderService.saveProvider. Arguments: Provider=[Provider: providerId:null providerName:[Jane Smith] ], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,006| Exiting method saveProvider
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,014| In method ProviderService.saveProvider. Arguments: Provider=[Provider: providerId:null providerName:[Jake Smith] ], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,015| Exiting method saveProvider
WARN - HibernateUserDAO.getUserByUsername(102) |2019-02-17 22:20:42,044| request for username 'scheduler' not found
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,120| In method UserService.createUser. Arguments: User=scheduler, String=<Arg value ignored>, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,238| Exiting method createUser
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,241| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: scheduler.username value: scheduler, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,270| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,274| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: scheduler.password value: Scheduler123, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,293| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,337| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=7fba1e5,uuid=4da187c6-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,346| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,364| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=c8813f7e,uuid=5ab6d8a8-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,375| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,388| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=eb3d3d44,uuid=7dd9ac8e-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,390| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,402| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=ce2c34c4,uuid=7e7d3e26-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,405| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,427| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=b4b49efa,uuid=7efeaa60-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,432| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,452| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=abc150ca,uuid=95636ce6-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,463| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,481| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=b519c52f,uuid=9ebdc232-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,483| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,500| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=b21fd75e,uuid=a62a40e0-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,510| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,516| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=f6a1c0a2,uuid=ac71c996-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,521| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,533| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=44b3d280,uuid=b29be856-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,535| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,561| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=da393751,uuid=cba5a260-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,565| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,581| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=e86393c9,uuid=d248c6c4-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,583| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,597| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=ea148419,uuid=0c617770-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,599| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,615| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=81627d4b,uuid=136ed9a4-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,617| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,633| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=fd2cb9c5,uuid=1b2d98c4-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,636| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,660| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=cb138210,uuid=25873c9e-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,667| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,685| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=20d32feb,uuid=2febe6a8-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,694| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,709| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=479f1d6a,uuid=38081afa-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,717| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,731| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=65d684ad,uuid=3f5a8ca2-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,733| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,763| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=33718375,uuid=452c596c-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,766| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,791| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=9e3b268b,uuid=4d3b6396-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,794| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:42,819| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=5dd5e553,uuid=4d85dda4-c437-11e4-a470-82b0ea87e2d8e], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:42,832| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:43,538| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.identifierSourceId value: 1, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:43,545| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:43,613| In method DefinitionService.saveDefinition. Arguments: Definition=appointmentschedulingui.appointmentDataSetDefinition.dailyAppointments, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:43,616| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=appointmentschedulingui.appointmentDataSetDefinition.dailyAppointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:43,697| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:43,697| Exiting method saveDefinition
WARN - SolrCore.initIndex(528) |2019-02-17 22:20:47,912| [collection1] Solr index directory '/home/jadeniran85/openmrs/server/chartsearch/collection1/data/index' doesn't exist. Creating new index...
WARN - RequestHandlers.initHandlersFromConfig(163) |2019-02-17 22:20:48,199| Multiple requestHandler registered to the same name: /update ignoring: org.apache.solr.handler.UpdateRequestHandler
WARN - ManagedResource.reloadFromStorage(182) |2019-02-17 22:20:48,534| No stored data found for /rest/managed
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:48,949| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.patientNameSearch value: registrationcore.ExistingPatientNameSearch, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:48,969| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:48,987| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=bef75e8b,uuid=635220c4-5461-4d53-876f-8c8523b3f8b3], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:48,994| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,003| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=36b5d76a,uuid=c74c8e77-4a58-4dd3-b384-3701330ccc55], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,008| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,015| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=593aa306,uuid=c176b305-8068-4adb-9cff-2f34ce383740], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,026| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,033| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=4a1af326,uuid=851561b5-a104-4149-bf1b-0a2ef83090a5], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,043| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,062| In method MetadataMappingService.saveMetadataTermMapping. Arguments: MetadataTermMapping=MetadataTermMapping[hashCode=4454c57e,uuid=07ced1e0-c726-49df-9ea4-81c961258426], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,085| Exiting method saveMetadataTermMapping
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,088| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emr.concept.diagnosisSetOfSets value: 160167AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,101| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,105| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: namephonetics.givenNameStringEncoder value: Soundex, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,115| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,118| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: namephonetics.middleNameStringEncoder value: Soundex, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,130| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,133| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: namephonetics.familyNameStringEncoder value: Soundex, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,141| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,156| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: namephonetics.familyName2StringEncoder value: Soundex, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,185| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,195| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.patientNameSearch value: registrationcore.BasicPatientNameSearch, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,205| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,207| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.fastSimilarPatientSearchAlgorithm value: registrationcore.BasicSimilarPatientSearchAlgorithm, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,214| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,216| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.preciseSimilarPatientSearchAlgorithm value: registrationcore.BasicExactPatientSearchAlgorithm, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,219| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,225| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: conceptmanagementapps.snomedCtConceptSource value: 1ADDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,231| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,440| In method FormService.saveForm. Arguments: Form=, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,476| Exiting method saveForm
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,514| In method HtmlFormEntryService.saveHtmlForm. Arguments: HtmlForm=HtmlForm[hashCode=c0684b5d,uuid=93253e2c-dc1e-418b-853a-80cbfd4d662a], 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,515| In method FormService.saveForm. Arguments: Form=1, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,519| Exiting method saveForm
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,524| Exiting method saveHtmlForm
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,731| In method FormService.saveForm. Arguments: Form=, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,771| Exiting method saveForm
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,804| In method HtmlFormEntryService.saveHtmlForm. Arguments: HtmlForm=HtmlForm[hashCode=13fb8f74,uuid=fc9eaf10-78e6-4e24-92a4-370ab62f25e7], 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:49,805| In method FormService.saveForm. Arguments: Form=2, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,814| Exiting method saveForm
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:49,827| Exiting method saveHtmlForm
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:50,016| In method FormService.saveForm. Arguments: Form=, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:50,078| Exiting method saveForm
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:50,080| In method HtmlFormEntryService.saveHtmlForm. Arguments: HtmlForm=HtmlForm[hashCode=bf9ecf30,uuid=1c125c10-a441-4c46-9291-04e248d04e8f], 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:50,082| In method FormService.saveForm. Arguments: Form=3, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:50,118| Exiting method saveForm
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:50,126| Exiting method saveHtmlForm
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:50,524| In method FormService.saveForm. Arguments: Form=, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:50,574| Exiting method saveForm
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:50,579| In method HtmlFormEntryService.saveHtmlForm. Arguments: HtmlForm=HtmlForm[hashCode=af5a58bb,uuid=7c1c43b1-da9f-46d7-82fb-ea244c108c14], 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:50,580| In method FormService.saveForm. Arguments: Form=4, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:50,595| Exiting method saveForm
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:50,597| Exiting method saveHtmlForm
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:50,757| In method FormService.saveForm. Arguments: Form=, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:50,778| Exiting method saveForm
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:50,790| In method HtmlFormEntryService.saveHtmlForm. Arguments: HtmlForm=HtmlForm[hashCode=4f5ad320,uuid=17e3c84f-9908-4cd4-8987-ff0ae48af3a9], 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:20:50,798| In method FormService.saveForm. Arguments: Form=5, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:50,801| Exiting method saveForm
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:20:50,805| Exiting method saveHtmlForm
ERROR - CommonsLoggingOutput.error(75) |2019-02-17 22:20:56,913| Line=381 The content of element type "dwr" must match "(init?,allow?,signatures?)".
ERROR - CommonsLoggingOutput.error(75) |2019-02-17 22:20:56,928| Parameter mismatch parsing signatures section in dwr.xml on line: DWRAtlasService.disableAtlasModule()
ERROR - CommonsLoggingOutput.error(75) |2019-02-17 22:20:56,936| Parameter mismatch parsing signatures section in dwr.xml on line: DWRHtmlFormEntryService.checkIfLoggedIn()
WARN - OpenmrsUtil.getRuntimePropertiesFilePathName(2085) |2019-02-17 22:20:57,033| Unable to find a runtime properties file at /home/jadeniran85/basicexample/openmrs-runtime.properties
WARN - DispatcherServlet.noHandlerFound(1120) |2019-02-17 22:29:52,620| No mapping found for HTTP request with URI [/openmrs/module/basicexample/basicexample.form] in DispatcherServlet with name 'openmrs'
WARN - DispatcherServlet.noHandlerFound(1120) |2019-02-17 22:31:28,897| No mapping found for HTTP request with URI [/openmrs/module/basicexample/basicexample.form] in DispatcherServlet with name 'openmrs'
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:46,765| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: layout.address.format value: <org.openmrs.layout.address.AddressTemplate>
     <nameMappings class="properties">
       <property name="postalCode" value="Location.postalCode"/>
       <property name="address2" value="Location.address2"/>
       <property name="address1" value="Location.address1"/>
       <property name="country" value="Location.country"/>
       <property name="stateProvince" value="Location.stateProvince"/>
       <property name="cityVillage" value="Location.cityVillage"/>
     </nameMappings>
     <sizeMappings class="properties">
       <property name="postalCode" value="10"/>
       <property name="address2" value="40"/>
       <property name="address1" value="40"/>
       <property name="country" value="10"/>
       <property name="stateProvince" value="10"/>
       <property name="cityVillage" value="10"/>
     </sizeMappings>
     <lineByLineFormat>
       <string>address1</string>
       <string>address2</string>
       <string>cityVillage stateProvince country postalCode</string>
     </lineByLineFormat>
   </org.openmrs.layout.address.AddressTemplate>, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:46,899| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:49,420| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: event.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:49,425| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:49,444| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: event.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:49,459| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:49,562| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: legacyui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:49,582| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:49,595| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: legacyui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:49,601| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:49,830| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: basicexample.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:49,838| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:49,845| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: basicexample.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:49,849| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:50,528| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:50,550| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:50,558| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:50,568| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:50,705| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: dataexchange.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:50,708| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:50,711| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: dataexchange.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:50,713| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:50,791| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingcompatibility.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:50,813| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:50,817| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingcompatibility.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:50,824| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:51,043| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: webservices.rest.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:51,051| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:51,065| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: webservices.rest.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:51,076| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:51,207| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: serialization.xstream.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:51,209| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:51,214| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: serialization.xstream.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:51,223| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:51,407| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uiframework.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:51,424| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:51,434| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uiframework.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:51,448| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:51,713| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uicommons.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:51,723| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:51,735| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uicommons.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:51,749| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:51,931| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: atlas.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:51,938| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:51,941| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: atlas.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:51,960| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:52,182| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uilibrary.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:52,190| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:52,202| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uilibrary.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:52,204| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:52,406| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:52,414| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:52,418| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:52,421| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:52,510| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlwidgets.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:52,516| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:52,521| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlwidgets.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:52,538| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:52,690| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:52,693| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:52,696| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:52,712| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:52,793| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: owa.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:52,799| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:52,801| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: owa.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:52,812| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:53,088| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatamapping.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:53,093| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:53,115| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatamapping.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:53,120| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:53,329| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatasharing.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:53,332| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:53,335| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatasharing.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:53,356| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:53,556| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatadeploy.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:53,562| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:53,576| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatadeploy.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:53,582| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:53,808| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentry.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:53,820| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:53,829| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentry.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:53,833| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:54,050| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: calculation.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:54,057| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:54,062| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: calculation.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:54,067| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:54,558| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:54,560| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:54,575| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:54,588| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:54,808| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emrapi.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:54,813| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:54,816| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emrapi.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:54,818| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:55,083| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentscheduling.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:55,101| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:55,103| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentscheduling.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:55,111| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:55,403| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingrest.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:55,413| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:55,415| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingrest.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:55,430| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:55,671| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: idgen.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:55,683| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:55,700| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: idgen.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:55,708| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:55,875| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencemetadata.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:55,886| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:55,900| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencemetadata.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:55,903| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:56,066| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencedemodata.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:56,080| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:56,083| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencedemodata.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:56,085| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:56,268| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:56,272| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:56,276| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:56,285| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:56,328| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.patientNameSearch value: registrationcore.BasicPatientNameSearch, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:56,348| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:56,581| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appframework.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:56,594| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:56,596| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appframework.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:56,605| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:56,795| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: formentryapp.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:56,809| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:56,818| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: formentryapp.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:56,829| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:57,028| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergyui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:57,037| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:57,043| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergyui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:57,055| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:57,199| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:57,203| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:57,213| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:57,224| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:57,388| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: adminui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:57,402| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:57,408| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: adminui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:57,410| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:57,624| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:57,637| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:57,639| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:57,646| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:57,852| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationapp.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:57,861| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:57,878| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationapp.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:57,884| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:58,085| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:58,107| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:58,110| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:58,111| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:58,289| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentschedulingui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:58,297| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:58,315| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentschedulingui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:58,323| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:58,545| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentryui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:58,552| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:58,555| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentryui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:58,571| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:59,399| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: chartsearch.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:59,410| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:59,413| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: chartsearch.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:59,417| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:59,721| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referenceapplication.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:59,723| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:42:59,734| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referenceapplication.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:42:59,739| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:43:00,935| In method SchedulerService.saveToMemento. Arguments: 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:43:00,944| Exiting method saveToMemento
INFO - EhCacheManagerFactoryBean.destroy(181) |2019-02-17 22:43:01,003| Shutting down EhCache CacheManager
INFO - ServiceContext.startRefreshingContext(808) |2019-02-17 22:43:01,004| Refreshing Context
INFO - EhCacheManagerFactoryBean.afterPropertiesSet(129) |2019-02-17 22:43:14,454| Initializing EhCache CacheManager
ERROR - BrokerService.start(528) |2019-02-17 22:43:48,947| Failed to start ActiveMQ JMS Message Broker. Reason: java.io.IOException: Invalid location: 1:98029, : java.lang.NegativeArraySizeException
java.io.IOException: Invalid location: 1:98029, : java.lang.NegativeArraySizeException
	at org.apache.kahadb.journal.DataFileAccessor.readRecord(DataFileAccessor.java:94)
	at org.apache.kahadb.journal.Journal.read(Journal.java:596)
	at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:786)
	at org.apache.activemq.store.kahadb.MessageDatabase.recoverProducerAudit(MessageDatabase.java:484)
	at org.apache.activemq.store.kahadb.MessageDatabase.recover(MessageDatabase.java:438)
	at org.apache.activemq.store.kahadb.MessageDatabase.open(MessageDatabase.java:315)
	at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:357)
	at org.apache.activemq.store.kahadb.MessageDatabase.doStart(MessageDatabase.java:222)
	at org.apache.activemq.store.kahadb.KahaDBStore.doStart(KahaDBStore.java:180)
	at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:53)
	at org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter.start(KahaDBPersistenceAdapter.java:186)
	at org.apache.activemq.broker.BrokerService.start(BrokerService.java:485)
	at org.apache.activemq.transport.vm.VMTransportFactory.doCompositeConnect(VMTransportFactory.java:123)
	at org.apache.activemq.transport.vm.VMTransportFactory.doConnect(VMTransportFactory.java:53)
	at org.apache.activemq.transport.TransportFactory.doConnect(TransportFactory.java:51)
	at org.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:80)
	at org.apache.activemq.ActiveMQConnectionFactory.createTransport(ActiveMQConnectionFactory.java:243)
	at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:258)
	at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:230)
	at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:178)
	at org.springframework.jms.connection.SingleConnectionFactory.doCreateConnection(SingleConnectionFactory.java:342)
	at org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:288)
	at org.springframework.jms.connection.SingleConnectionFactory.createConnection(SingleConnectionFactory.java:225)
	at org.openmrs.event.EventEngine.subscribe(EventEngine.java:266)
	at org.openmrs.event.EventEngine.subscribe(EventEngine.java:185)
	at org.openmrs.event.Event.subscribe(Event.java:78)
	at org.openmrs.module.registrationcore.api.impl.PatientCreationListener.init(PatientCreationListener.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1694)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:762)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)
	at org.openmrs.module.ModuleUtil.refreshApplicationContext(ModuleUtil.java:894)
	at org.openmrs.module.web.WebModuleUtil.refreshWAC(WebModuleUtil.java:866)
	at org.openmrs.web.Listener.performWebStartOfModules(Listener.java:656)
	at org.openmrs.web.Listener.performWebStartOfModules(Listener.java:635)
	at org.openmrs.web.Listener.startOpenmrs(Listener.java:266)
	at org.openmrs.web.WebDaemon$1.run(WebDaemon.java:42)
WARN - SimpleUrlHandlerMapping.registerHandlers(115) |2019-02-17 22:43:52,580| Neither 'urlMap' nor 'mappings' set on SimpleUrlHandlerMapping
WARN - SimpleUrlHandlerMapping.registerHandlers(115) |2019-02-17 22:43:57,002| Neither 'urlMap' nor 'mappings' set on SimpleUrlHandlerMapping
INFO - ServiceContext.doneRefreshingContext(819) |2019-02-17 22:43:57,012| Done refreshing Context
WARN - IdgenTask.run(32) |2019-02-17 22:43:57,583| Not running scheduled task. DaemonToken = null; enabled = false
WARN - AddressConfigurationLoader.loadAddressConfiguration(64) |2019-02-17 22:44:03,565| Address hierarchy configuration file appears invalid, skipping the loading process: addressConfiguration.xml
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,086| In method UserService.saveRole. Arguments: Role=Privilege Level: Full, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,092| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,144| In method UserService.saveRole. Arguments: Role=Privilege Level: High, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,172| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,297| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: visits.assignmentHandler value: org.openmrs.module.emrapi.adt.EmrApiVisitAssignmentHandler, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,302| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,398| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencemetadata.installedVersion value: 15, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,404| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,411| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.systemAdministration, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,440| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,448| In method UserService.savePrivilege. Arguments: Privilege=App: referenceapplication.legacyAdmin, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,449| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,451| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.activeVisits, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,453| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,456| In method UserService.savePrivilege. Arguments: Privilege=App: atlas.manage, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,460| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,470| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.configuremetadata, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,475| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,488| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.findPatient, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,489| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,491| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.patientDashboard, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,492| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,497| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.patientVisits, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,498| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,511| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.systemAdministration, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,512| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,514| In method UserService.savePrivilege. Arguments: Privilege=App: formentryapp.forms, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,523| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,526| In method UserService.savePrivilege. Arguments: Privilege=App: referenceapplication.vitals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,537| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,543| In method UserService.savePrivilege. Arguments: Privilege=App: registrationapp.registerPatient, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,548| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,551| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.createRetrospectiveVisit, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,556| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,561| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.createVisit, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,568| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,576| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.endVisit, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,581| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,612| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.mergeVisits, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,614| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,621| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.simpleAdmission, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,622| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,625| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.simpleDischarge, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,633| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,650| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.simpleTransfer, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,650| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,654| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.simpleVisitNote, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,660| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,676| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.vitals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,677| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,682| In method UserService.savePrivilege. Arguments: Privilege=Task: Modify Allergies, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,682| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,692| In method UserService.savePrivilege. Arguments: Privilege=Task: emr.patient.encounter.delete, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,697| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,700| In method UserService.savePrivilege. Arguments: Privilege=Task: emr.patient.encounter.edit, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,714| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,768| In method UserService.saveRole. Arguments: Role=Application: Administers System, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,769| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,806| In method UserService.saveRole. Arguments: Role=Application: Configures Metadata, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,814| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,857| In method UserService.saveRole. Arguments: Role=Application: Configures Forms, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,857| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,897| In method UserService.saveRole. Arguments: Role=Application: Manages Atlas, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,904| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:04,952| In method UserService.saveRole. Arguments: Role=Application: Registers Patients, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:04,953| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,004| In method UserService.saveRole. Arguments: Role=Application: Enters Vitals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,006| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,060| In method UserService.saveRole. Arguments: Role=Application: Uses Capture Vitals App, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,066| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,122| In method UserService.saveRole. Arguments: Role=Application: Uses Patient Summary, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,123| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,163| In method UserService.saveRole. Arguments: Role=Application: Writes Clinical Notes, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,189| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,262| In method UserService.saveRole. Arguments: Role=Application: Enters ADT Events, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,269| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,307| In method UserService.saveRole. Arguments: Role=Application: Records Allergies, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,310| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,319| In method UserService.saveRole. Arguments: Role=Application: Has Super User Privileges, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,324| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,364| In method UserService.saveRole. Arguments: Role=Application: Sees Appointment Schedule, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,369| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,388| In method UserService.saveRole. Arguments: Role=Application: Edits Existing Encounters, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,394| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,430| In method UserService.saveRole. Arguments: Role=Application: Requests Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,443| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,487| In method UserService.saveRole. Arguments: Role=Application: Schedules Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,488| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,535| In method UserService.saveRole. Arguments: Role=Application: Schedules And Overbooks Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,536| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,573| In method UserService.saveRole. Arguments: Role=Application: Manages Provider Schedules, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,580| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,603| In method UserService.saveRole. Arguments: Role=Application: Configures Appointment Scheduling, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,604| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,647| In method UserService.saveRole. Arguments: Role=Organizational: Doctor, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,651| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,694| In method UserService.saveRole. Arguments: Role=Organizational: Nurse, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,700| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,731| In method UserService.saveRole. Arguments: Role=Organizational: Registration Clerk, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,732| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,785| In method UserService.saveRole. Arguments: Role=Organizational: System Administrator, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,788| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:05,826| In method UserService.saveRole. Arguments: Role=Organizational: Hospital Administrator, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:05,832| Exiting method saveRole
INFO - SerializationServiceImpl.getDefaultSerializer(71) |2019-02-17 22:44:06,430| No default serializer specified - using builtin SimpleXStreamSerializer.
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:06,637| In method UserService.saveRole. Arguments: Role=Application: Administers System, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:06,695| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:06,728| In method UserService.saveRole. Arguments: Role=Application: Configures Appointment Scheduling, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:06,754| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:06,792| In method UserService.saveRole. Arguments: Role=Application: Configures Forms, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:06,832| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:06,867| In method UserService.saveRole. Arguments: Role=Application: Configures Metadata, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:06,903| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:06,929| In method UserService.saveRole. Arguments: Role=Application: Edits Existing Encounters, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:06,950| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:06,979| In method UserService.saveRole. Arguments: Role=Application: Enters ADT Events, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:06,999| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:07,020| In method UserService.saveRole. Arguments: Role=Application: Enters Vitals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:07,053| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:07,069| In method UserService.saveRole. Arguments: Role=Application: Has Super User Privileges, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:07,117| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:07,147| In method UserService.saveRole. Arguments: Role=Application: Manages Atlas, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:07,180| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:07,208| In method UserService.saveRole. Arguments: Role=Application: Manages Provider Schedules, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:07,239| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:07,261| In method UserService.saveRole. Arguments: Role=Application: Records Allergies, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:07,290| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:07,323| In method UserService.saveRole. Arguments: Role=Application: Registers Patients, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:07,345| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:07,375| In method UserService.saveRole. Arguments: Role=Application: Requests Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:07,401| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:07,432| In method UserService.saveRole. Arguments: Role=Application: Schedules And Overbooks Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:07,450| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:07,483| In method UserService.saveRole. Arguments: Role=Application: Schedules Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:07,503| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:07,533| In method UserService.saveRole. Arguments: Role=Application: Sees Appointment Schedule, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:07,553| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:07,582| In method UserService.saveRole. Arguments: Role=Application: Uses Capture Vitals App, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:07,612| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:07,631| In method UserService.saveRole. Arguments: Role=Application: Uses Patient Summary, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:07,662| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:07,693| In method UserService.saveRole. Arguments: Role=Application: Writes Clinical Notes, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:07,721| Exiting method saveRole
INFO - SerializationServiceImpl.getDefaultSerializer(71) |2019-02-17 22:44:07,780| No default serializer specified - using builtin SimpleXStreamSerializer.
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:07,821| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: layout.address.format value: <org.openmrs.layout.address.AddressTemplate>
     <nameMappings class="properties">
       <property name="postalCode" value="Location.postalCode"/>
       <property name="address2" value="Location.address2"/>
       <property name="address1" value="Location.address1"/>
       <property name="country" value="Location.country"/>
       <property name="stateProvince" value="Location.stateProvince"/>
       <property name="cityVillage" value="Location.cityVillage"/>
     </nameMappings>
     <sizeMappings class="properties">
       <property name="postalCode" value="10"/>
       <property name="address2" value="40"/>
       <property name="address1" value="40"/>
       <property name="country" value="10"/>
       <property name="stateProvince" value="10"/>
       <property name="cityVillage" value="10"/>
     </sizeMappings>
     <lineByLineFormat>
       <string>address1</string>
       <string>address2</string>
       <string>cityVillage stateProvince country postalCode</string>
     </lineByLineFormat>
   </org.openmrs.layout.address.AddressTemplate>, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:07,850| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:07,959| In method UserService.saveUser. Arguments: User=clerk, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,019| Exiting method saveUser
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,065| In method UserService.saveUser. Arguments: User=nurse, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,090| Exiting method saveUser
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,138| In method UserService.saveUser. Arguments: User=doctor, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,162| Exiting method saveUser
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,214| In method UserService.saveUser. Arguments: User=sysadmin, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,239| Exiting method saveUser
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,408| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=7fba1e5,uuid=4da187c6-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,413| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,432| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=c8813f7e,uuid=5ab6d8a8-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,435| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,465| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=eb3d3d44,uuid=7dd9ac8e-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,470| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,504| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=ce2c34c4,uuid=7e7d3e26-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,506| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,521| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=b4b49efa,uuid=7efeaa60-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,526| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,549| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=abc150ca,uuid=95636ce6-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,552| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,568| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=b519c52f,uuid=9ebdc232-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,569| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,594| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=b21fd75e,uuid=a62a40e0-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,598| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,625| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=f6a1c0a2,uuid=ac71c996-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,633| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,655| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=44b3d280,uuid=b29be856-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,658| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,685| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=da393751,uuid=cba5a260-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,689| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,717| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=e86393c9,uuid=d248c6c4-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,719| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,750| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=ea148419,uuid=0c617770-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,752| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,783| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=81627d4b,uuid=136ed9a4-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,784| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,801| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=fd2cb9c5,uuid=1b2d98c4-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,813| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,838| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=cb138210,uuid=25873c9e-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,844| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,862| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=20d32feb,uuid=2febe6a8-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,876| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,884| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=479f1d6a,uuid=38081afa-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,893| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,900| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=65d684ad,uuid=3f5a8ca2-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,909| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,938| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=33718375,uuid=452c596c-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,941| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,956| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=9e3b268b,uuid=4d3b6396-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:08,963| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:08,991| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=5dd5e553,uuid=4d85dda4-c437-11e4-a470-82b0ea87e2d8e], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:09,006| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:09,488| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.identifierSourceId value: 1, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:09,491| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:09,697| In method DefinitionService.saveDefinition. Arguments: Definition=appointmentschedulingui.appointmentDataSetDefinition.dailyAppointments, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:09,699| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=appointmentschedulingui.appointmentDataSetDefinition.dailyAppointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:09,720| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:09,732| Exiting method saveDefinition
WARN - RequestHandlers.initHandlersFromConfig(163) |2019-02-17 22:44:12,412| Multiple requestHandler registered to the same name: /update ignoring: org.apache.solr.handler.UpdateRequestHandler
WARN - ManagedResource.reloadFromStorage(182) |2019-02-17 22:44:12,655| No stored data found for /rest/managed
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:12,995| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.patientNameSearch value: registrationcore.ExistingPatientNameSearch, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:13,014| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:13,099| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emr.concept.diagnosisSetOfSets value: 160167AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:13,118| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:13,121| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: namephonetics.givenNameStringEncoder value: Soundex, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:13,139| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:13,142| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: namephonetics.middleNameStringEncoder value: Soundex, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:13,156| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:13,162| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: namephonetics.familyNameStringEncoder value: Soundex, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:13,209| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:13,224| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: namephonetics.familyName2StringEncoder value: Soundex, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:13,239| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:13,253| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.patientNameSearch value: registrationcore.BasicPatientNameSearch, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:13,290| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:13,297| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.fastSimilarPatientSearchAlgorithm value: registrationcore.BasicSimilarPatientSearchAlgorithm, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:13,320| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:13,324| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.preciseSimilarPatientSearchAlgorithm value: registrationcore.BasicExactPatientSearchAlgorithm, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:13,349| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:44:13,356| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: conceptmanagementapps.snomedCtConceptSource value: 1ADDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:44:13,375| Exiting method saveGlobalProperty
ERROR - CommonsLoggingOutput.error(75) |2019-02-17 22:44:15,320| Line=381 The content of element type "dwr" must match "(init?,allow?,signatures?)".
ERROR - CommonsLoggingOutput.error(75) |2019-02-17 22:44:15,339| Parameter mismatch parsing signatures section in dwr.xml on line: DWRAtlasService.disableAtlasModule()
ERROR - CommonsLoggingOutput.error(75) |2019-02-17 22:44:15,342| Parameter mismatch parsing signatures section in dwr.xml on line: DWRHtmlFormEntryService.checkIfLoggedIn()
WARN - OpenmrsUtil.getRuntimePropertiesFilePathName(2085) |2019-02-17 22:44:15,406| Unable to find a runtime properties file at /home/jadeniran85/basicexample/openmrs-runtime.properties
WARN - OpenmrsUtil.getRuntimePropertiesFilePathName(2085) |2019-02-17 22:44:15,620| Unable to find a runtime properties file at /home/jadeniran85/basicexample/openmrs-runtime.properties
WARN - DispatcherServlet.noHandlerFound(1120) |2019-02-17 22:46:53,928| No mapping found for HTTP request with URI [/openmrs/module/basicexample/manage.form] in DispatcherServlet with name 'openmrs'
WARN - DispatcherServlet.noHandlerFound(1120) |2019-02-17 22:47:04,871| No mapping found for HTTP request with URI [/openmrs/module/basicexample/basicexample.form] in DispatcherServlet with name 'openmrs'
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:30,654| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: layout.address.format value: <org.openmrs.layout.address.AddressTemplate>
     <nameMappings class="properties">
       <property name="postalCode" value="Location.postalCode"/>
       <property name="address2" value="Location.address2"/>
       <property name="address1" value="Location.address1"/>
       <property name="country" value="Location.country"/>
       <property name="stateProvince" value="Location.stateProvince"/>
       <property name="cityVillage" value="Location.cityVillage"/>
     </nameMappings>
     <sizeMappings class="properties">
       <property name="postalCode" value="10"/>
       <property name="address2" value="40"/>
       <property name="address1" value="40"/>
       <property name="country" value="10"/>
       <property name="stateProvince" value="10"/>
       <property name="cityVillage" value="10"/>
     </sizeMappings>
     <lineByLineFormat>
       <string>address1</string>
       <string>address2</string>
       <string>cityVillage stateProvince country postalCode</string>
     </lineByLineFormat>
   </org.openmrs.layout.address.AddressTemplate>, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:30,786| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:33,307| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: event.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:33,314| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:33,328| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: event.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:33,336| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:33,457| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: legacyui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:33,474| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:33,493| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: legacyui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:33,502| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:33,759| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: basicexample.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:33,773| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:33,793| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: basicexample.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:33,800| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:34,557| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:34,578| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:34,583| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:34,589| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:34,721| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: dataexchange.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:34,728| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:34,739| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: dataexchange.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:34,748| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:34,803| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingcompatibility.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:34,812| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:34,823| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingcompatibility.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:34,841| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:35,064| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: webservices.rest.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:35,068| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:35,073| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: webservices.rest.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:35,087| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:35,222| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: serialization.xstream.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:35,227| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:35,231| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: serialization.xstream.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:35,240| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:35,461| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uiframework.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:35,479| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:35,494| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uiframework.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:35,498| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:35,733| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uicommons.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:35,746| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:35,752| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uicommons.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:35,769| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:35,924| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: atlas.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:35,945| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:35,948| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: atlas.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:35,953| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:36,223| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uilibrary.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:36,227| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:36,231| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uilibrary.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:36,237| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:36,422| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:36,427| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:36,441| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:36,450| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:36,532| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlwidgets.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:36,540| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:36,551| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlwidgets.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:36,556| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:36,692| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:36,709| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:36,712| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:36,717| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:36,802| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: owa.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:36,807| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:36,810| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: owa.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:36,820| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:37,136| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatamapping.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:37,139| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:37,150| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatamapping.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:37,166| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:37,376| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatasharing.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:37,387| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:37,395| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatasharing.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:37,399| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:37,620| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatadeploy.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:37,622| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:37,631| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatadeploy.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:37,637| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:37,885| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentry.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:37,888| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:37,892| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentry.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:37,900| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:38,094| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: calculation.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:38,118| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:38,121| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: calculation.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:38,126| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:38,794| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:38,803| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:38,810| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:38,813| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:39,025| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emrapi.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:39,032| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:39,042| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emrapi.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:39,048| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:39,337| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentscheduling.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:39,345| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:39,352| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentscheduling.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:39,359| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:39,634| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingrest.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:39,651| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:39,653| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingrest.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:39,655| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:39,853| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: idgen.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:39,858| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:39,861| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: idgen.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:39,872| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:40,086| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencemetadata.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:40,090| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:40,100| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencemetadata.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:40,103| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:40,279| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencedemodata.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:40,283| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:40,291| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencedemodata.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:40,298| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:40,494| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:40,508| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:40,510| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:40,517| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:40,551| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.patientNameSearch value: registrationcore.BasicPatientNameSearch, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:40,577| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:40,780| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appframework.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:40,785| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:40,797| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appframework.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:40,803| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:40,972| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: formentryapp.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:40,988| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:40,994| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: formentryapp.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:41,004| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:41,194| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergyui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:41,196| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:41,216| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergyui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:41,220| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:41,372| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:41,380| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:41,388| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:41,401| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:41,578| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: adminui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:41,585| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:41,587| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: adminui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:41,595| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:41,835| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:41,847| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:41,849| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:41,861| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:42,070| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationapp.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:42,078| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:42,087| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationapp.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:42,102| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:42,297| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:42,311| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:42,314| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:42,323| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:42,510| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentschedulingui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:42,514| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:42,536| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentschedulingui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:42,539| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:42,777| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentryui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:42,784| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:42,790| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentryui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:42,793| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:43,572| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: chartsearch.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:43,578| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:43,591| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: chartsearch.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:43,601| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:43,883| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referenceapplication.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:43,887| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:43,894| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referenceapplication.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:43,911| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:53:45,260| In method SchedulerService.saveToMemento. Arguments: 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:53:45,265| Exiting method saveToMemento
INFO - EhCacheManagerFactoryBean.destroy(181) |2019-02-17 22:53:45,330| Shutting down EhCache CacheManager
INFO - ServiceContext.startRefreshingContext(808) |2019-02-17 22:53:45,333| Refreshing Context
INFO - EhCacheManagerFactoryBean.afterPropertiesSet(129) |2019-02-17 22:53:57,593| Initializing EhCache CacheManager
ERROR - BrokerService.start(528) |2019-02-17 22:54:27,514| Failed to start ActiveMQ JMS Message Broker. Reason: java.io.IOException: Invalid location: 1:131147, : java.lang.NegativeArraySizeException
java.io.IOException: Invalid location: 1:131147, : java.lang.NegativeArraySizeException
	at org.apache.kahadb.journal.DataFileAccessor.readRecord(DataFileAccessor.java:94)
	at org.apache.kahadb.journal.Journal.read(Journal.java:596)
	at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:786)
	at org.apache.activemq.store.kahadb.MessageDatabase.recoverProducerAudit(MessageDatabase.java:484)
	at org.apache.activemq.store.kahadb.MessageDatabase.recover(MessageDatabase.java:438)
	at org.apache.activemq.store.kahadb.MessageDatabase.open(MessageDatabase.java:315)
	at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:357)
	at org.apache.activemq.store.kahadb.MessageDatabase.doStart(MessageDatabase.java:222)
	at org.apache.activemq.store.kahadb.KahaDBStore.doStart(KahaDBStore.java:180)
	at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:53)
	at org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter.start(KahaDBPersistenceAdapter.java:186)
	at org.apache.activemq.broker.BrokerService.start(BrokerService.java:485)
	at org.apache.activemq.transport.vm.VMTransportFactory.doCompositeConnect(VMTransportFactory.java:123)
	at org.apache.activemq.transport.vm.VMTransportFactory.doConnect(VMTransportFactory.java:53)
	at org.apache.activemq.transport.TransportFactory.doConnect(TransportFactory.java:51)
	at org.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:80)
	at org.apache.activemq.ActiveMQConnectionFactory.createTransport(ActiveMQConnectionFactory.java:243)
	at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:258)
	at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:230)
	at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:178)
	at org.springframework.jms.connection.SingleConnectionFactory.doCreateConnection(SingleConnectionFactory.java:342)
	at org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:288)
	at org.springframework.jms.connection.SingleConnectionFactory.createConnection(SingleConnectionFactory.java:225)
	at org.openmrs.event.EventEngine.subscribe(EventEngine.java:266)
	at org.openmrs.event.EventEngine.subscribe(EventEngine.java:185)
	at org.openmrs.event.Event.subscribe(Event.java:78)
	at org.openmrs.module.registrationcore.api.impl.PatientCreationListener.init(PatientCreationListener.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1694)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:762)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)
	at org.openmrs.module.ModuleUtil.refreshApplicationContext(ModuleUtil.java:894)
	at org.openmrs.module.web.WebModuleUtil.refreshWAC(WebModuleUtil.java:866)
	at org.openmrs.web.Listener.performWebStartOfModules(Listener.java:656)
	at org.openmrs.web.Listener.performWebStartOfModules(Listener.java:635)
	at org.openmrs.web.Listener.startOpenmrs(Listener.java:266)
	at org.openmrs.web.WebDaemon$1.run(WebDaemon.java:42)
WARN - SimpleUrlHandlerMapping.registerHandlers(115) |2019-02-17 22:54:31,086| Neither 'urlMap' nor 'mappings' set on SimpleUrlHandlerMapping
WARN - SimpleUrlHandlerMapping.registerHandlers(115) |2019-02-17 22:54:35,258| Neither 'urlMap' nor 'mappings' set on SimpleUrlHandlerMapping
INFO - ServiceContext.doneRefreshingContext(819) |2019-02-17 22:54:35,261| Done refreshing Context
WARN - IdgenTask.run(32) |2019-02-17 22:54:36,848| Not running scheduled task. DaemonToken = null; enabled = false
WARN - AddressConfigurationLoader.loadAddressConfiguration(64) |2019-02-17 22:54:42,590| Address hierarchy configuration file appears invalid, skipping the loading process: addressConfiguration.xml
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,111| In method UserService.saveRole. Arguments: Role=Privilege Level: Full, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,127| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,170| In method UserService.saveRole. Arguments: Role=Privilege Level: High, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,174| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,278| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: visits.assignmentHandler value: org.openmrs.module.emrapi.adt.EmrApiVisitAssignmentHandler, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,281| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,379| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencemetadata.installedVersion value: 15, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,386| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,403| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.systemAdministration, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,418| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,427| In method UserService.savePrivilege. Arguments: Privilege=App: referenceapplication.legacyAdmin, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,430| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,437| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.activeVisits, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,446| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,456| In method UserService.savePrivilege. Arguments: Privilege=App: atlas.manage, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,462| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,464| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.configuremetadata, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,470| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,478| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.findPatient, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,485| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,497| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.patientDashboard, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,498| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,508| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.patientVisits, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,514| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,526| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.systemAdministration, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,527| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,533| In method UserService.savePrivilege. Arguments: Privilege=App: formentryapp.forms, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,534| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,536| In method UserService.savePrivilege. Arguments: Privilege=App: referenceapplication.vitals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,536| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,543| In method UserService.savePrivilege. Arguments: Privilege=App: registrationapp.registerPatient, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,544| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,546| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.createRetrospectiveVisit, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,547| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,554| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.createVisit, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,558| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,560| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.endVisit, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,562| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,564| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.mergeVisits, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,565| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,568| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.simpleAdmission, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,568| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,570| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.simpleDischarge, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,574| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,579| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.simpleTransfer, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,579| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,586| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.simpleVisitNote, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,590| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,595| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.vitals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,595| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,601| In method UserService.savePrivilege. Arguments: Privilege=Task: Modify Allergies, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,606| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,611| In method UserService.savePrivilege. Arguments: Privilege=Task: emr.patient.encounter.delete, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,611| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,613| In method UserService.savePrivilege. Arguments: Privilege=Task: emr.patient.encounter.edit, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,618| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,681| In method UserService.saveRole. Arguments: Role=Application: Administers System, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,681| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,725| In method UserService.saveRole. Arguments: Role=Application: Configures Metadata, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,726| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,772| In method UserService.saveRole. Arguments: Role=Application: Configures Forms, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,773| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,818| In method UserService.saveRole. Arguments: Role=Application: Manages Atlas, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,819| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,870| In method UserService.saveRole. Arguments: Role=Application: Registers Patients, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,871| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,922| In method UserService.saveRole. Arguments: Role=Application: Enters Vitals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,926| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:43,954| In method UserService.saveRole. Arguments: Role=Application: Uses Capture Vitals App, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:43,962| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:44,004| In method UserService.saveRole. Arguments: Role=Application: Uses Patient Summary, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:44,005| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:44,055| In method UserService.saveRole. Arguments: Role=Application: Writes Clinical Notes, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:44,056| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:44,123| In method UserService.saveRole. Arguments: Role=Application: Enters ADT Events, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:44,131| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:44,156| In method UserService.saveRole. Arguments: Role=Application: Records Allergies, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:44,157| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:44,179| In method UserService.saveRole. Arguments: Role=Application: Has Super User Privileges, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:44,180| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:44,224| In method UserService.saveRole. Arguments: Role=Application: Sees Appointment Schedule, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:44,224| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:44,243| In method UserService.saveRole. Arguments: Role=Application: Edits Existing Encounters, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:44,244| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:44,275| In method UserService.saveRole. Arguments: Role=Application: Requests Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:44,275| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:44,319| In method UserService.saveRole. Arguments: Role=Application: Schedules Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:44,323| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:44,351| In method UserService.saveRole. Arguments: Role=Application: Schedules And Overbooks Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:44,351| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:44,385| In method UserService.saveRole. Arguments: Role=Application: Manages Provider Schedules, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:44,391| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:44,413| In method UserService.saveRole. Arguments: Role=Application: Configures Appointment Scheduling, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:44,418| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:44,462| In method UserService.saveRole. Arguments: Role=Organizational: Doctor, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:44,463| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:44,506| In method UserService.saveRole. Arguments: Role=Organizational: Nurse, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:44,507| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:44,530| In method UserService.saveRole. Arguments: Role=Organizational: Registration Clerk, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:44,538| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:44,581| In method UserService.saveRole. Arguments: Role=Organizational: System Administrator, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:44,582| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:44,613| In method UserService.saveRole. Arguments: Role=Organizational: Hospital Administrator, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:44,617| Exiting method saveRole
INFO - SerializationServiceImpl.getDefaultSerializer(71) |2019-02-17 22:54:45,252| No default serializer specified - using builtin SimpleXStreamSerializer.
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:45,460| In method UserService.saveRole. Arguments: Role=Application: Administers System, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:45,514| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:45,560| In method UserService.saveRole. Arguments: Role=Application: Configures Appointment Scheduling, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:45,582| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:45,625| In method UserService.saveRole. Arguments: Role=Application: Configures Forms, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:45,660| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:45,702| In method UserService.saveRole. Arguments: Role=Application: Configures Metadata, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:45,733| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:45,775| In method UserService.saveRole. Arguments: Role=Application: Edits Existing Encounters, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:45,805| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:45,837| In method UserService.saveRole. Arguments: Role=Application: Enters ADT Events, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:45,858| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:45,898| In method UserService.saveRole. Arguments: Role=Application: Enters Vitals, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:45,927| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:45,969| In method UserService.saveRole. Arguments: Role=Application: Has Super User Privileges, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:45,988| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:46,027| In method UserService.saveRole. Arguments: Role=Application: Manages Atlas, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:46,045| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:46,089| In method UserService.saveRole. Arguments: Role=Application: Manages Provider Schedules, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:46,112| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:46,153| In method UserService.saveRole. Arguments: Role=Application: Records Allergies, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:46,184| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:46,220| In method UserService.saveRole. Arguments: Role=Application: Registers Patients, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:46,241| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:46,281| In method UserService.saveRole. Arguments: Role=Application: Requests Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:46,302| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:46,346| In method UserService.saveRole. Arguments: Role=Application: Schedules And Overbooks Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:46,364| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:46,400| In method UserService.saveRole. Arguments: Role=Application: Schedules Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:46,430| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:46,468| In method UserService.saveRole. Arguments: Role=Application: Sees Appointment Schedule, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:46,498| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:46,531| In method UserService.saveRole. Arguments: Role=Application: Uses Capture Vitals App, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:46,546| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:46,561| In method UserService.saveRole. Arguments: Role=Application: Uses Patient Summary, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:46,586| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:46,602| In method UserService.saveRole. Arguments: Role=Application: Writes Clinical Notes, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:46,620| Exiting method saveRole
INFO - SerializationServiceImpl.getDefaultSerializer(71) |2019-02-17 22:54:46,685| No default serializer specified - using builtin SimpleXStreamSerializer.
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:46,716| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: layout.address.format value: <org.openmrs.layout.address.AddressTemplate>
     <nameMappings class="properties">
       <property name="postalCode" value="Location.postalCode"/>
       <property name="address2" value="Location.address2"/>
       <property name="address1" value="Location.address1"/>
       <property name="country" value="Location.country"/>
       <property name="stateProvince" value="Location.stateProvince"/>
       <property name="cityVillage" value="Location.cityVillage"/>
     </nameMappings>
     <sizeMappings class="properties">
       <property name="postalCode" value="10"/>
       <property name="address2" value="40"/>
       <property name="address1" value="40"/>
       <property name="country" value="10"/>
       <property name="stateProvince" value="10"/>
       <property name="cityVillage" value="10"/>
     </sizeMappings>
     <lineByLineFormat>
       <string>address1</string>
       <string>address2</string>
       <string>cityVillage stateProvince country postalCode</string>
     </lineByLineFormat>
   </org.openmrs.layout.address.AddressTemplate>, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:46,746| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:46,857| In method UserService.saveUser. Arguments: User=clerk, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:46,903| Exiting method saveUser
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:46,952| In method UserService.saveUser. Arguments: User=nurse, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:46,983| Exiting method saveUser
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,035| In method UserService.saveUser. Arguments: User=doctor, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,064| Exiting method saveUser
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,124| In method UserService.saveUser. Arguments: User=sysadmin, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,138| Exiting method saveUser
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,281| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=7fba1e5,uuid=4da187c6-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,289| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,309| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=c8813f7e,uuid=5ab6d8a8-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,310| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,336| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=eb3d3d44,uuid=7dd9ac8e-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,339| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,350| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=ce2c34c4,uuid=7e7d3e26-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,360| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,383| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=b4b49efa,uuid=7efeaa60-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,389| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,410| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=abc150ca,uuid=95636ce6-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,411| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,425| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=b519c52f,uuid=9ebdc232-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,426| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,460| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=b21fd75e,uuid=a62a40e0-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,462| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,479| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=f6a1c0a2,uuid=ac71c996-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,484| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,505| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=44b3d280,uuid=b29be856-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,507| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,540| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=da393751,uuid=cba5a260-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,541| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,559| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=e86393c9,uuid=d248c6c4-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,566| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,596| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=ea148419,uuid=0c617770-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,598| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,627| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=81627d4b,uuid=136ed9a4-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,629| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,641| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=fd2cb9c5,uuid=1b2d98c4-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,643| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,671| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=cb138210,uuid=25873c9e-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,678| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,699| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=20d32feb,uuid=2febe6a8-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,707| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,719| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=479f1d6a,uuid=38081afa-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,724| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,749| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=65d684ad,uuid=3f5a8ca2-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,751| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,772| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=33718375,uuid=452c596c-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,778| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,797| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=9e3b268b,uuid=4d3b6396-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,798| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:47,821| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=5dd5e553,uuid=4d85dda4-c437-11e4-a470-82b0ea87e2d8e], 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:47,829| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:48,316| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.identifierSourceId value: 1, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:48,323| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:48,521| In method DefinitionService.saveDefinition. Arguments: Definition=appointmentschedulingui.appointmentDataSetDefinition.dailyAppointments, 
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:48,524| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=appointmentschedulingui.appointmentDataSetDefinition.dailyAppointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:48,555| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:48,572| Exiting method saveDefinition
WARN - RequestHandlers.initHandlersFromConfig(163) |2019-02-17 22:54:51,348| Multiple requestHandler registered to the same name: /update ignoring: org.apache.solr.handler.UpdateRequestHandler
WARN - ManagedResource.reloadFromStorage(182) |2019-02-17 22:54:51,563| No stored data found for /rest/managed
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:51,822| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.patientNameSearch value: registrationcore.ExistingPatientNameSearch, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:51,845| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:51,920| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emr.concept.diagnosisSetOfSets value: 160167AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:51,928| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:51,937| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: namephonetics.givenNameStringEncoder value: Soundex, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:51,962| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:51,965| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: namephonetics.middleNameStringEncoder value: Soundex, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:51,972| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:51,974| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: namephonetics.familyNameStringEncoder value: Soundex, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:51,995| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:52,003| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: namephonetics.familyName2StringEncoder value: Soundex, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:52,009| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:52,027| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.patientNameSearch value: registrationcore.BasicPatientNameSearch, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:52,050| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:52,056| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.fastSimilarPatientSearchAlgorithm value: registrationcore.BasicSimilarPatientSearchAlgorithm, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:52,078| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:52,085| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.preciseSimilarPatientSearchAlgorithm value: registrationcore.BasicExactPatientSearchAlgorithm, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:52,094| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-17 22:54:52,102| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: conceptmanagementapps.snomedCtConceptSource value: 1ADDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD, 
INFO - LoggingAdvice.invoke(155) |2019-02-17 22:54:52,114| Exiting method saveGlobalProperty
ERROR - CommonsLoggingOutput.error(75) |2019-02-17 22:54:54,049| Line=381 The content of element type "dwr" must match "(init?,allow?,signatures?)".
ERROR - CommonsLoggingOutput.error(75) |2019-02-17 22:54:54,055| Parameter mismatch parsing signatures section in dwr.xml on line: DWRAtlasService.disableAtlasModule()
ERROR - CommonsLoggingOutput.error(75) |2019-02-17 22:54:54,068| Parameter mismatch parsing signatures section in dwr.xml on line: DWRHtmlFormEntryService.checkIfLoggedIn()
WARN - OpenmrsUtil.getRuntimePropertiesFilePathName(2085) |2019-02-17 22:54:54,131| Unable to find a runtime properties file at /home/jadeniran85/basicexample/openmrs-runtime.properties
WARN - OpenmrsUtil.getRuntimePropertiesFilePathName(2085) |2019-02-17 22:54:54,321| Unable to find a runtime properties file at /home/jadeniran85/basicexample/openmrs-runtime.properties
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:05,010| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: layout.address.format value: <org.openmrs.layout.address.AddressTemplate>
     <nameMappings class="properties">
       <property name="postalCode" value="Location.postalCode"/>
       <property name="address2" value="Location.address2"/>
       <property name="address1" value="Location.address1"/>
       <property name="country" value="Location.country"/>
       <property name="stateProvince" value="Location.stateProvince"/>
       <property name="cityVillage" value="Location.cityVillage"/>
     </nameMappings>
     <sizeMappings class="properties">
       <property name="postalCode" value="10"/>
       <property name="address2" value="40"/>
       <property name="address1" value="40"/>
       <property name="country" value="10"/>
       <property name="stateProvince" value="10"/>
       <property name="cityVillage" value="10"/>
     </sizeMappings>
     <lineByLineFormat>
       <string>address1</string>
       <string>address2</string>
       <string>cityVillage stateProvince country postalCode</string>
     </lineByLineFormat>
   </org.openmrs.layout.address.AddressTemplate>, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:05,145| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:06,433| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: event.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:06,440| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:06,455| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: event.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:06,482| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:06,607| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: legacyui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:06,632| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:06,645| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: legacyui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:06,658| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:06,913| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: basicexample.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:06,918| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:06,941| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: basicexample.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:06,970| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:07,841| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:07,871| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:07,877| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: fhir.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:07,890| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:08,032| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: dataexchange.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:08,039| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:08,042| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: dataexchange.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:08,081| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:08,139| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingcompatibility.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:08,146| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:08,149| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingcompatibility.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:08,151| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:08,359| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: webservices.rest.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:08,369| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:08,384| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: webservices.rest.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:08,387| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:08,510| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: serialization.xstream.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:08,516| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:08,520| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: serialization.xstream.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:08,530| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:08,780| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uiframework.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:08,790| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:08,806| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uiframework.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:08,809| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:09,085| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uicommons.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:09,092| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:09,111| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uicommons.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:09,123| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:09,305| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: atlas.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:09,318| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:09,321| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: atlas.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:09,324| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:09,568| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uilibrary.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:09,580| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:09,583| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: uilibrary.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:09,591| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:09,773| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:09,776| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:09,789| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: providermanagement.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:09,792| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:09,881| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlwidgets.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:09,892| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:09,904| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlwidgets.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:09,915| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:10,076| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:10,096| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:10,108| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: addresshierarchy.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:10,130| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:10,232| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: owa.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:10,236| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:10,239| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: owa.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:10,242| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:10,525| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatamapping.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:10,531| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:10,555| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatamapping.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:10,565| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:10,785| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatasharing.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:10,787| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:10,798| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatasharing.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:10,814| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:10,997| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatadeploy.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:11,004| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:11,014| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: metadatadeploy.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:11,024| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:11,255| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentry.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:11,271| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:11,282| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentry.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:11,286| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:11,477| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: calculation.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:11,490| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:11,496| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: calculation.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:11,513| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:12,095| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:12,101| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:12,113| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reporting.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:12,118| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:12,372| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emrapi.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:12,384| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:12,388| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emrapi.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:12,393| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:12,642| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentscheduling.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:12,646| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:12,652| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentscheduling.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:12,655| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:12,951| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingrest.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:12,966| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:12,969| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingrest.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:12,981| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:13,205| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: idgen.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:13,218| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:13,236| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: idgen.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:13,241| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:13,423| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencemetadata.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:13,450| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:13,454| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencemetadata.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:13,456| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:13,629| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencedemodata.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:13,637| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:13,645| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencedemodata.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:13,647| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:13,851| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:13,862| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:13,864| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:13,871| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:13,929| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.patientNameSearch value: registrationcore.BasicPatientNameSearch, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:13,946| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:14,178| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appframework.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:14,193| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:14,196| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appframework.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:14,203| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:14,380| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: formentryapp.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:14,390| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:14,394| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: formentryapp.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:14,412| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:14,614| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergyui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:14,623| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:14,631| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: allergyui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:14,634| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:14,940| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:14,948| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:14,951| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:14,969| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:15,148| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: adminui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:15,160| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:15,163| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: adminui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:15,170| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:15,393| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:15,406| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:15,410| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: coreapps.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:15,415| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:15,618| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationapp.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:15,633| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:15,648| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationapp.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:15,651| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:15,853| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:15,868| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:15,872| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: reportingui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:15,881| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:16,068| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentschedulingui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:16,078| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:16,093| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: appointmentschedulingui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:16,099| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:16,301| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentryui.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:16,312| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:16,325| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: htmlformentryui.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:16,328| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:17,057| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: chartsearch.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:17,061| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:17,074| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: chartsearch.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:17,077| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:17,362| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referenceapplication.started value: true, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:17,369| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:17,376| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referenceapplication.mandatory value: false, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:17,381| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:56:18,697| In method SchedulerService.saveToMemento. Arguments: 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:56:18,714| Exiting method saveToMemento
INFO - EhCacheManagerFactoryBean.destroy(181) |2019-02-20 20:56:18,773| Shutting down EhCache CacheManager
INFO - ServiceContext.startRefreshingContext(808) |2019-02-20 20:56:18,775| Refreshing Context
INFO - EhCacheManagerFactoryBean.afterPropertiesSet(129) |2019-02-20 20:56:31,479| Initializing EhCache CacheManager
ERROR - BrokerService.start(528) |2019-02-20 20:57:03,862| Failed to start ActiveMQ JMS Message Broker. Reason: java.io.IOException: Invalid location: 1:202550, : java.lang.NegativeArraySizeException
java.io.IOException: Invalid location: 1:202550, : java.lang.NegativeArraySizeException
	at org.apache.kahadb.journal.DataFileAccessor.readRecord(DataFileAccessor.java:94)
	at org.apache.kahadb.journal.Journal.read(Journal.java:596)
	at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:786)
	at org.apache.activemq.store.kahadb.MessageDatabase.recoverProducerAudit(MessageDatabase.java:484)
	at org.apache.activemq.store.kahadb.MessageDatabase.recover(MessageDatabase.java:438)
	at org.apache.activemq.store.kahadb.MessageDatabase.open(MessageDatabase.java:315)
	at org.apache.activemq.store.kahadb.MessageDatabase.load(MessageDatabase.java:357)
	at org.apache.activemq.store.kahadb.MessageDatabase.doStart(MessageDatabase.java:222)
	at org.apache.activemq.store.kahadb.KahaDBStore.doStart(KahaDBStore.java:180)
	at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:53)
	at org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter.start(KahaDBPersistenceAdapter.java:186)
	at org.apache.activemq.broker.BrokerService.start(BrokerService.java:485)
	at org.apache.activemq.transport.vm.VMTransportFactory.doCompositeConnect(VMTransportFactory.java:123)
	at org.apache.activemq.transport.vm.VMTransportFactory.doConnect(VMTransportFactory.java:53)
	at org.apache.activemq.transport.TransportFactory.doConnect(TransportFactory.java:51)
	at org.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:80)
	at org.apache.activemq.ActiveMQConnectionFactory.createTransport(ActiveMQConnectionFactory.java:243)
	at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:258)
	at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:230)
	at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:178)
	at org.springframework.jms.connection.SingleConnectionFactory.doCreateConnection(SingleConnectionFactory.java:342)
	at org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:288)
	at org.springframework.jms.connection.SingleConnectionFactory.createConnection(SingleConnectionFactory.java:225)
	at org.openmrs.event.EventEngine.subscribe(EventEngine.java:266)
	at org.openmrs.event.EventEngine.subscribe(EventEngine.java:185)
	at org.openmrs.event.Event.subscribe(Event.java:78)
	at org.openmrs.module.registrationcore.api.impl.PatientCreationListener.init(PatientCreationListener.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1694)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1633)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:762)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)
	at org.openmrs.module.ModuleUtil.refreshApplicationContext(ModuleUtil.java:894)
	at org.openmrs.module.web.WebModuleUtil.refreshWAC(WebModuleUtil.java:866)
	at org.openmrs.web.Listener.performWebStartOfModules(Listener.java:656)
	at org.openmrs.web.Listener.performWebStartOfModules(Listener.java:635)
	at org.openmrs.web.Listener.startOpenmrs(Listener.java:266)
	at org.openmrs.web.WebDaemon$1.run(WebDaemon.java:42)
WARN - SimpleUrlHandlerMapping.registerHandlers(115) |2019-02-20 20:57:08,583| Neither 'urlMap' nor 'mappings' set on SimpleUrlHandlerMapping
WARN - SimpleUrlHandlerMapping.registerHandlers(115) |2019-02-20 20:57:12,787| Neither 'urlMap' nor 'mappings' set on SimpleUrlHandlerMapping
INFO - ServiceContext.doneRefreshingContext(819) |2019-02-20 20:57:12,805| Done refreshing Context
WARN - IdgenTask.run(32) |2019-02-20 20:57:13,181| Not running scheduled task. DaemonToken = null; enabled = false
WARN - AddressConfigurationLoader.loadAddressConfiguration(64) |2019-02-20 20:57:19,113| Address hierarchy configuration file appears invalid, skipping the loading process: addressConfiguration.xml
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:19,587| In method UserService.saveRole. Arguments: Role=Privilege Level: Full, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:19,603| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:19,653| In method UserService.saveRole. Arguments: Role=Privilege Level: High, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:19,665| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:19,784| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: visits.assignmentHandler value: org.openmrs.module.emrapi.adt.EmrApiVisitAssignmentHandler, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:19,789| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:19,869| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: referencemetadata.installedVersion value: 15, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:19,879| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:19,897| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.systemAdministration, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:19,918| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:19,928| In method UserService.savePrivilege. Arguments: Privilege=App: referenceapplication.legacyAdmin, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:19,932| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:19,935| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.activeVisits, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:19,948| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:19,951| In method UserService.savePrivilege. Arguments: Privilege=App: atlas.manage, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:19,957| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:19,969| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.configuremetadata, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:19,970| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:19,978| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.findPatient, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:19,982| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:19,986| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.patientDashboard, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:19,988| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:19,992| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.patientVisits, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:19,993| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:19,995| In method UserService.savePrivilege. Arguments: Privilege=App: coreapps.systemAdministration, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:19,995| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,002| In method UserService.savePrivilege. Arguments: Privilege=App: formentryapp.forms, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,003| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,015| In method UserService.savePrivilege. Arguments: Privilege=App: referenceapplication.vitals, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,016| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,038| In method UserService.savePrivilege. Arguments: Privilege=App: registrationapp.registerPatient, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,040| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,055| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.createRetrospectiveVisit, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,055| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,063| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.createVisit, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,067| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,070| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.endVisit, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,071| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,082| In method UserService.savePrivilege. Arguments: Privilege=Task: coreapps.mergeVisits, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,082| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,102| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.simpleAdmission, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,103| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,115| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.simpleDischarge, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,116| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,129| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.simpleTransfer, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,132| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,134| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.simpleVisitNote, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,154| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,164| In method UserService.savePrivilege. Arguments: Privilege=Task: referenceapplication.vitals, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,165| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,167| In method UserService.savePrivilege. Arguments: Privilege=Task: Modify Allergies, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,184| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,186| In method UserService.savePrivilege. Arguments: Privilege=Task: emr.patient.encounter.delete, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,188| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,214| In method UserService.savePrivilege. Arguments: Privilege=Task: emr.patient.encounter.edit, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,217| Exiting method savePrivilege
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,289| In method UserService.saveRole. Arguments: Role=Application: Administers System, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,290| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,333| In method UserService.saveRole. Arguments: Role=Application: Configures Metadata, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,338| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,384| In method UserService.saveRole. Arguments: Role=Application: Configures Forms, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,385| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,417| In method UserService.saveRole. Arguments: Role=Application: Manages Atlas, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,431| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,477| In method UserService.saveRole. Arguments: Role=Application: Registers Patients, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,485| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,539| In method UserService.saveRole. Arguments: Role=Application: Enters Vitals, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,540| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,580| In method UserService.saveRole. Arguments: Role=Application: Uses Capture Vitals App, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,583| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,615| In method UserService.saveRole. Arguments: Role=Application: Uses Patient Summary, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,632| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,679| In method UserService.saveRole. Arguments: Role=Application: Writes Clinical Notes, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,681| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,760| In method UserService.saveRole. Arguments: Role=Application: Enters ADT Events, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,763| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,794| In method UserService.saveRole. Arguments: Role=Application: Records Allergies, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,799| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,805| In method UserService.saveRole. Arguments: Role=Application: Has Super User Privileges, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,817| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,866| In method UserService.saveRole. Arguments: Role=Application: Sees Appointment Schedule, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,866| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,883| In method UserService.saveRole. Arguments: Role=Application: Edits Existing Encounters, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,884| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,913| In method UserService.saveRole. Arguments: Role=Application: Requests Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,922| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:20,961| In method UserService.saveRole. Arguments: Role=Application: Schedules Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:20,962| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:21,006| In method UserService.saveRole. Arguments: Role=Application: Schedules And Overbooks Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:21,011| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:21,050| In method UserService.saveRole. Arguments: Role=Application: Manages Provider Schedules, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:21,057| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:21,082| In method UserService.saveRole. Arguments: Role=Application: Configures Appointment Scheduling, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:21,084| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:21,124| In method UserService.saveRole. Arguments: Role=Organizational: Doctor, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:21,130| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:21,189| In method UserService.saveRole. Arguments: Role=Organizational: Nurse, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:21,190| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:21,221| In method UserService.saveRole. Arguments: Role=Organizational: Registration Clerk, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:21,221| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:21,270| In method UserService.saveRole. Arguments: Role=Organizational: System Administrator, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:21,270| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:21,294| In method UserService.saveRole. Arguments: Role=Organizational: Hospital Administrator, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:21,295| Exiting method saveRole
INFO - SerializationServiceImpl.getDefaultSerializer(71) |2019-02-20 20:57:21,906| No default serializer specified - using builtin SimpleXStreamSerializer.
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:22,116| In method UserService.saveRole. Arguments: Role=Application: Administers System, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:22,181| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:22,232| In method UserService.saveRole. Arguments: Role=Application: Configures Appointment Scheduling, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:22,250| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:22,292| In method UserService.saveRole. Arguments: Role=Application: Configures Forms, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:22,318| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:22,353| In method UserService.saveRole. Arguments: Role=Application: Configures Metadata, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:22,384| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:22,417| In method UserService.saveRole. Arguments: Role=Application: Edits Existing Encounters, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:22,451| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:22,472| In method UserService.saveRole. Arguments: Role=Application: Enters ADT Events, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:22,505| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:22,531| In method UserService.saveRole. Arguments: Role=Application: Enters Vitals, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:22,570| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:22,594| In method UserService.saveRole. Arguments: Role=Application: Has Super User Privileges, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:22,614| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:22,637| In method UserService.saveRole. Arguments: Role=Application: Manages Atlas, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:22,660| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:22,684| In method UserService.saveRole. Arguments: Role=Application: Manages Provider Schedules, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:22,714| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:22,735| In method UserService.saveRole. Arguments: Role=Application: Records Allergies, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:22,767| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:22,788| In method UserService.saveRole. Arguments: Role=Application: Registers Patients, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:22,809| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:22,840| In method UserService.saveRole. Arguments: Role=Application: Requests Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:22,852| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:22,878| In method UserService.saveRole. Arguments: Role=Application: Schedules And Overbooks Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:22,909| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:22,932| In method UserService.saveRole. Arguments: Role=Application: Schedules Appointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:22,947| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:22,975| In method UserService.saveRole. Arguments: Role=Application: Sees Appointment Schedule, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:23,000| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:23,021| In method UserService.saveRole. Arguments: Role=Application: Uses Capture Vitals App, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:23,055| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:23,069| In method UserService.saveRole. Arguments: Role=Application: Uses Patient Summary, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:23,095| Exiting method saveRole
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:23,116| In method UserService.saveRole. Arguments: Role=Application: Writes Clinical Notes, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:23,139| Exiting method saveRole
INFO - SerializationServiceImpl.getDefaultSerializer(71) |2019-02-20 20:57:23,208| No default serializer specified - using builtin SimpleXStreamSerializer.
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:23,256| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: layout.address.format value: <org.openmrs.layout.address.AddressTemplate>
     <nameMappings class="properties">
       <property name="postalCode" value="Location.postalCode"/>
       <property name="address2" value="Location.address2"/>
       <property name="address1" value="Location.address1"/>
       <property name="country" value="Location.country"/>
       <property name="stateProvince" value="Location.stateProvince"/>
       <property name="cityVillage" value="Location.cityVillage"/>
     </nameMappings>
     <sizeMappings class="properties">
       <property name="postalCode" value="10"/>
       <property name="address2" value="40"/>
       <property name="address1" value="40"/>
       <property name="country" value="10"/>
       <property name="stateProvince" value="10"/>
       <property name="cityVillage" value="10"/>
     </sizeMappings>
     <lineByLineFormat>
       <string>address1</string>
       <string>address2</string>
       <string>cityVillage stateProvince country postalCode</string>
     </lineByLineFormat>
   </org.openmrs.layout.address.AddressTemplate>, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:23,287| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:23,402| In method UserService.saveUser. Arguments: User=clerk, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:23,467| Exiting method saveUser
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:23,503| In method UserService.saveUser. Arguments: User=nurse, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:23,554| Exiting method saveUser
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:23,594| In method UserService.saveUser. Arguments: User=doctor, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:23,626| Exiting method saveUser
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:23,687| In method UserService.saveUser. Arguments: User=sysadmin, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:23,728| Exiting method saveUser
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:23,866| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=7fba1e5,uuid=4da187c6-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:23,879| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:23,886| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=c8813f7e,uuid=5ab6d8a8-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:23,887| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:23,914| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=eb3d3d44,uuid=7dd9ac8e-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:23,922| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:23,939| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=ce2c34c4,uuid=7e7d3e26-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:23,946| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:23,967| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=b4b49efa,uuid=7efeaa60-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:23,968| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:23,998| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=abc150ca,uuid=95636ce6-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:23,999| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:24,023| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=b519c52f,uuid=9ebdc232-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:24,026| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:24,048| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=b21fd75e,uuid=a62a40e0-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:24,053| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:24,073| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=f6a1c0a2,uuid=ac71c996-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:24,076| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:24,094| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=44b3d280,uuid=b29be856-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:24,100| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:24,127| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=da393751,uuid=cba5a260-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:24,137| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:24,155| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=e86393c9,uuid=d248c6c4-c436-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:24,160| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:24,184| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=ea148419,uuid=0c617770-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:24,185| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:24,213| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=81627d4b,uuid=136ed9a4-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:24,215| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:24,229| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=fd2cb9c5,uuid=1b2d98c4-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:24,236| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:24,267| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=cb138210,uuid=25873c9e-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:24,278| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:24,299| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=20d32feb,uuid=2febe6a8-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:24,300| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:24,319| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=479f1d6a,uuid=38081afa-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:24,321| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:24,348| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=65d684ad,uuid=3f5a8ca2-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:24,349| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:24,366| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=33718375,uuid=452c596c-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:24,377| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:24,388| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=9e3b268b,uuid=4d3b6396-c437-11e4-a470-82b0ea87e2d8], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:24,394| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:24,413| In method AppointmentService.saveAppointmentType. Arguments: AppointmentType=AppointmentType[hashCode=5dd5e553,uuid=4d85dda4-c437-11e4-a470-82b0ea87e2d8e], 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:24,437| Exiting method saveAppointmentType
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:24,925| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.identifierSourceId value: 1, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:24,932| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:25,143| In method DefinitionService.saveDefinition. Arguments: Definition=appointmentschedulingui.appointmentDataSetDefinition.dailyAppointments, 
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:25,147| In method SerializedDefinitionService.saveDefinition. Arguments: Definition=appointmentschedulingui.appointmentDataSetDefinition.dailyAppointments, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:25,184| Exiting method saveDefinition
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:25,185| Exiting method saveDefinition
WARN - RequestHandlers.initHandlersFromConfig(163) |2019-02-20 20:57:27,859| Multiple requestHandler registered to the same name: /update ignoring: org.apache.solr.handler.UpdateRequestHandler
WARN - ManagedResource.reloadFromStorage(182) |2019-02-20 20:57:28,059| No stored data found for /rest/managed
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:28,340| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.patientNameSearch value: registrationcore.ExistingPatientNameSearch, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:28,358| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:28,428| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: emr.concept.diagnosisSetOfSets value: 160167AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:28,440| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:28,448| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: namephonetics.givenNameStringEncoder value: Soundex, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:28,465| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:28,471| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: namephonetics.middleNameStringEncoder value: Soundex, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:28,488| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:28,494| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: namephonetics.familyNameStringEncoder value: Soundex, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:28,501| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:28,507| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: namephonetics.familyName2StringEncoder value: Soundex, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:28,534| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:28,540| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.patientNameSearch value: registrationcore.BasicPatientNameSearch, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:28,569| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:28,573| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.fastSimilarPatientSearchAlgorithm value: registrationcore.BasicSimilarPatientSearchAlgorithm, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:28,583| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:28,594| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: registrationcore.preciseSimilarPatientSearchAlgorithm value: registrationcore.BasicExactPatientSearchAlgorithm, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:28,609| Exiting method saveGlobalProperty
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:57:28,611| In method AdministrationService.saveGlobalProperty. Arguments: GlobalProperty=property: conceptmanagementapps.snomedCtConceptSource value: 1ADDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:57:28,625| Exiting method saveGlobalProperty
ERROR - CommonsLoggingOutput.error(75) |2019-02-20 20:57:30,491| Line=381 The content of element type "dwr" must match "(init?,allow?,signatures?)".
ERROR - CommonsLoggingOutput.error(75) |2019-02-20 20:57:30,499| Parameter mismatch parsing signatures section in dwr.xml on line: DWRAtlasService.disableAtlasModule()
ERROR - CommonsLoggingOutput.error(75) |2019-02-20 20:57:30,516| Parameter mismatch parsing signatures section in dwr.xml on line: DWRHtmlFormEntryService.checkIfLoggedIn()
WARN - OpenmrsUtil.getRuntimePropertiesFilePathName(2085) |2019-02-20 20:57:30,575| Unable to find a runtime properties file at /home/jadeniran85/basicexample/openmrs-runtime.properties
WARN - OpenmrsUtil.getRuntimePropertiesFilePathName(2085) |2019-02-20 20:57:30,760| Unable to find a runtime properties file at /home/jadeniran85/basicexample/openmrs-runtime.properties
INFO - SerializationServiceImpl.getDefaultSerializer(71) |2019-02-20 20:58:56,005| No default serializer specified - using builtin SimpleXStreamSerializer.
INFO - SerializationServiceImpl.getDefaultSerializer(71) |2019-02-20 20:59:54,949| No default serializer specified - using builtin SimpleXStreamSerializer.
INFO - SerializationServiceImpl.getDefaultSerializer(71) |2019-02-20 20:59:55,000| No default serializer specified - using builtin SimpleXStreamSerializer.
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:59:55,071| In method PatientService.savePatient. Arguments: Patient=Patient#null, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:59:55,153| Exiting method savePatient
INFO - LoggingAdvice.invoke(115) |2019-02-20 20:59:57,145| In method UserService.saveUser. Arguments: User=admin, 
INFO - LoggingAdvice.invoke(155) |2019-02-20 20:59:57,180| Exiting method saveUser
ERROR - StickyNoteFragmentController.controller(62) |2019-02-20 20:59:58,971| Could not load the Sticky Note concept. The most probable cause is that the concept mapping provided in the "coreapps.conceptStickyNote" global property does not match with any existing concept. Verify that this value is correct. (Mapping value: CIEL:165095)
ERROR - StickyNoteFragmentController.controller(62) |2019-02-20 21:00:13,778| Could not load the Sticky Note concept. The most probable cause is that the concept mapping provided in the "coreapps.conceptStickyNote" global property does not match with any existing concept. Verify that this value is correct. (Mapping value: CIEL:165095)
ERROR - StickyNoteFragmentController.controller(62) |2019-02-20 21:05:09,499| Could not load the Sticky Note concept. The most probable cause is that the concept mapping provided in the "coreapps.conceptStickyNote" global property does not match with any existing concept. Verify that this value is correct. (Mapping value: CIEL:165095)
